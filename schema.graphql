schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Доступ


columns and relationships of "access"

"""
type access {
  id: String!
  name: String!
}

"""
aggregated selection of "access"
"""
type access_aggregate {
  aggregate: access_aggregate_fields
  nodes: [access!]!
}

"""
aggregate fields of "access"
"""
type access_aggregate_fields {
  count(columns: [access_select_column!], distinct: Boolean): Int
  max: access_max_fields
  min: access_min_fields
}

"""
order by aggregate values of table "access"
"""
input access_aggregate_order_by {
  count: order_by
  max: access_max_order_by
  min: access_min_order_by
}

"""
input type for inserting array relation for remote table "access"
"""
input access_arr_rel_insert_input {
  data: [access_insert_input!]!
  on_conflict: access_on_conflict
}

"""
Boolean expression to filter rows from the table "access". All fields are combined with a logical 'AND'.
"""
input access_bool_exp {
  _and: [access_bool_exp]
  _not: access_bool_exp
  _or: [access_bool_exp]
  id: String_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "access"
"""
enum access_constraint {
  """unique or primary key constraint"""
  permission_category_pkey
}

"""
input type for inserting data into table "access"
"""
input access_insert_input {
  id: String
  name: String
}

"""aggregate max on columns"""
type access_max_fields {
  id: String
  name: String
}

"""
order by max() on columns of table "access"
"""
input access_max_order_by {
  id: order_by
  name: order_by
}

"""aggregate min on columns"""
type access_min_fields {
  id: String
  name: String
}

"""
order by min() on columns of table "access"
"""
input access_min_order_by {
  id: order_by
  name: order_by
}

"""
response of any mutation on the table "access"
"""
type access_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [access!]!
}

"""
input type for inserting object relation for remote table "access"
"""
input access_obj_rel_insert_input {
  data: access_insert_input!
  on_conflict: access_on_conflict
}

"""
on conflict condition type for table "access"
"""
input access_on_conflict {
  constraint: access_constraint!
  update_columns: [access_update_column!]!
  where: access_bool_exp
}

"""
ordering options when selecting data from "access"
"""
input access_order_by {
  id: order_by
  name: order_by
}

"""
primary key columns input for table: "access"
"""
input access_pk_columns_input {
  id: String!
}

"""
select columns of table "access"
"""
enum access_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "access"
"""
input access_set_input {
  id: String
  name: String
}

"""
update columns of table "access"
"""
enum access_update_column {
  """column name"""
  id

  """column name"""
  name
}

"""
Типы статей


columns and relationships of "article_type"

"""
type article_type {
  """An array relationship"""
  articles(
    """distinct select on columns"""
    distinct_on: [articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_order_by!]

    """filter the rows returned"""
    where: articles_bool_exp
  ): [articles!]!

  """An aggregated array relationship"""
  articles_aggregate(
    """distinct select on columns"""
    distinct_on: [articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_order_by!]

    """filter the rows returned"""
    where: articles_bool_exp
  ): articles_aggregate!
  name: String!
  type: String!
}

"""
aggregated selection of "article_type"
"""
type article_type_aggregate {
  aggregate: article_type_aggregate_fields
  nodes: [article_type!]!
}

"""
aggregate fields of "article_type"
"""
type article_type_aggregate_fields {
  count(columns: [article_type_select_column!], distinct: Boolean): Int
  max: article_type_max_fields
  min: article_type_min_fields
}

"""
order by aggregate values of table "article_type"
"""
input article_type_aggregate_order_by {
  count: order_by
  max: article_type_max_order_by
  min: article_type_min_order_by
}

"""
input type for inserting array relation for remote table "article_type"
"""
input article_type_arr_rel_insert_input {
  data: [article_type_insert_input!]!
  on_conflict: article_type_on_conflict
}

"""
Boolean expression to filter rows from the table "article_type". All fields are combined with a logical 'AND'.
"""
input article_type_bool_exp {
  _and: [article_type_bool_exp]
  _not: article_type_bool_exp
  _or: [article_type_bool_exp]
  articles: articles_bool_exp
  name: String_comparison_exp
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "article_type"
"""
enum article_type_constraint {
  """unique or primary key constraint"""
  article_type_pkey
}

enum article_type_enum {
  """Документ Google"""
  GOOGLE_DOCUMENT

  """Текстовая статья"""
  TEXT
}

"""
expression to compare columns of type article_type_enum. All fields are combined with logical 'AND'.
"""
input article_type_enum_comparison_exp {
  _eq: article_type_enum
  _in: [article_type_enum!]
  _is_null: Boolean
  _neq: article_type_enum
  _nin: [article_type_enum!]
}

"""
input type for inserting data into table "article_type"
"""
input article_type_insert_input {
  articles: articles_arr_rel_insert_input
  name: String
  type: String
}

"""aggregate max on columns"""
type article_type_max_fields {
  name: String
  type: String
}

"""
order by max() on columns of table "article_type"
"""
input article_type_max_order_by {
  name: order_by
  type: order_by
}

"""aggregate min on columns"""
type article_type_min_fields {
  name: String
  type: String
}

"""
order by min() on columns of table "article_type"
"""
input article_type_min_order_by {
  name: order_by
  type: order_by
}

"""
response of any mutation on the table "article_type"
"""
type article_type_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [article_type!]!
}

"""
input type for inserting object relation for remote table "article_type"
"""
input article_type_obj_rel_insert_input {
  data: article_type_insert_input!
  on_conflict: article_type_on_conflict
}

"""
on conflict condition type for table "article_type"
"""
input article_type_on_conflict {
  constraint: article_type_constraint!
  update_columns: [article_type_update_column!]!
  where: article_type_bool_exp
}

"""
ordering options when selecting data from "article_type"
"""
input article_type_order_by {
  articles_aggregate: articles_aggregate_order_by
  name: order_by
  type: order_by
}

"""
primary key columns input for table: "article_type"
"""
input article_type_pk_columns_input {
  type: String!
}

"""
select columns of table "article_type"
"""
enum article_type_select_column {
  """column name"""
  name

  """column name"""
  type
}

"""
input type for updating data in table "article_type"
"""
input article_type_set_input {
  name: String
  type: String
}

"""
update columns of table "article_type"
"""
enum article_type_update_column {
  """column name"""
  name

  """column name"""
  type
}

"""
Статьи


columns and relationships of "articles"

"""
type articles {
  """An object relationship"""
  article_type: article_type!

  """An object relationship"""
  base: bases!
  base_id: uuid!

  """An object relationship"""
  category: categories_of_articles
  category_id: uuid

  """An array relationship"""
  comments(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): [comments!]!

  """An aggregated array relationship"""
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): comments_aggregate!
  content: String
  created_at: timestamptz!
  deleted_at: timestamptz
  external_url: String

  """An array relationship"""
  favorites(
    """distinct select on columns"""
    distinct_on: [favorites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [favorites_order_by!]

    """filter the rows returned"""
    where: favorites_bool_exp
  ): [favorites!]!

  """An aggregated array relationship"""
  favorites_aggregate(
    """distinct select on columns"""
    distinct_on: [favorites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [favorites_order_by!]

    """filter the rows returned"""
    where: favorites_bool_exp
  ): favorites_aggregate!
  id: uuid!
  name: String!
  order: Int!
  original_content: String

  """An object relationship"""
  owner: users!
  owner_id: uuid!

  """An array relationship"""
  read(
    """distinct select on columns"""
    distinct_on: [users_read_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_read_articles_order_by!]

    """filter the rows returned"""
    where: users_read_articles_bool_exp
  ): [users_read_articles!]!

  """An aggregated array relationship"""
  read_aggregate(
    """distinct select on columns"""
    distinct_on: [users_read_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_read_articles_order_by!]

    """filter the rows returned"""
    where: users_read_articles_bool_exp
  ): users_read_articles_aggregate!

  """An array relationship"""
  tags(
    """distinct select on columns"""
    distinct_on: [articles_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_tags_order_by!]

    """filter the rows returned"""
    where: articles_tags_bool_exp
  ): [articles_tags!]!

  """An aggregated array relationship"""
  tags_aggregate(
    """distinct select on columns"""
    distinct_on: [articles_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_tags_order_by!]

    """filter the rows returned"""
    where: articles_tags_bool_exp
  ): articles_tags_aggregate!
  type: article_type_enum!
  updated_at: timestamptz!
  use_editor: Boolean!
}

"""
aggregated selection of "articles"
"""
type articles_aggregate {
  aggregate: articles_aggregate_fields
  nodes: [articles!]!
}

"""
aggregate fields of "articles"
"""
type articles_aggregate_fields {
  avg: articles_avg_fields
  count(columns: [articles_select_column!], distinct: Boolean): Int
  max: articles_max_fields
  min: articles_min_fields
  stddev: articles_stddev_fields
  stddev_pop: articles_stddev_pop_fields
  stddev_samp: articles_stddev_samp_fields
  sum: articles_sum_fields
  var_pop: articles_var_pop_fields
  var_samp: articles_var_samp_fields
  variance: articles_variance_fields
}

"""
order by aggregate values of table "articles"
"""
input articles_aggregate_order_by {
  avg: articles_avg_order_by
  count: order_by
  max: articles_max_order_by
  min: articles_min_order_by
  stddev: articles_stddev_order_by
  stddev_pop: articles_stddev_pop_order_by
  stddev_samp: articles_stddev_samp_order_by
  sum: articles_sum_order_by
  var_pop: articles_var_pop_order_by
  var_samp: articles_var_samp_order_by
  variance: articles_variance_order_by
}

"""
input type for inserting array relation for remote table "articles"
"""
input articles_arr_rel_insert_input {
  data: [articles_insert_input!]!
  on_conflict: articles_on_conflict
}

"""aggregate avg on columns"""
type articles_avg_fields {
  order: Float
}

"""
order by avg() on columns of table "articles"
"""
input articles_avg_order_by {
  order: order_by
}

"""
Boolean expression to filter rows from the table "articles". All fields are combined with a logical 'AND'.
"""
input articles_bool_exp {
  _and: [articles_bool_exp]
  _not: articles_bool_exp
  _or: [articles_bool_exp]
  article_type: article_type_bool_exp
  base: bases_bool_exp
  base_id: uuid_comparison_exp
  category: categories_of_articles_bool_exp
  category_id: uuid_comparison_exp
  comments: comments_bool_exp
  content: String_comparison_exp
  created_at: timestamptz_comparison_exp
  deleted_at: timestamptz_comparison_exp
  external_url: String_comparison_exp
  favorites: favorites_bool_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  order: Int_comparison_exp
  original_content: String_comparison_exp
  owner: users_bool_exp
  owner_id: uuid_comparison_exp
  read: users_read_articles_bool_exp
  tags: articles_tags_bool_exp
  type: article_type_enum_comparison_exp
  updated_at: timestamptz_comparison_exp
  use_editor: Boolean_comparison_exp
}

"""
unique or primary key constraints on table "articles"
"""
enum articles_constraint {
  """unique or primary key constraint"""
  articles_pkey
}

"""
input type for incrementing integer column in table "articles"
"""
input articles_inc_input {
  order: Int
}

"""
input type for inserting data into table "articles"
"""
input articles_insert_input {
  article_type: article_type_obj_rel_insert_input
  base: bases_obj_rel_insert_input
  base_id: uuid
  category: categories_of_articles_obj_rel_insert_input
  category_id: uuid
  comments: comments_arr_rel_insert_input
  content: String
  created_at: timestamptz
  deleted_at: timestamptz
  external_url: String
  favorites: favorites_arr_rel_insert_input
  id: uuid
  name: String
  order: Int
  original_content: String
  owner: users_obj_rel_insert_input
  owner_id: uuid
  read: users_read_articles_arr_rel_insert_input
  tags: articles_tags_arr_rel_insert_input
  type: article_type_enum
  updated_at: timestamptz
  use_editor: Boolean
}

"""aggregate max on columns"""
type articles_max_fields {
  base_id: uuid
  category_id: uuid
  content: String
  created_at: timestamptz
  deleted_at: timestamptz
  external_url: String
  id: uuid
  name: String
  order: Int
  original_content: String
  owner_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "articles"
"""
input articles_max_order_by {
  base_id: order_by
  category_id: order_by
  content: order_by
  created_at: order_by
  deleted_at: order_by
  external_url: order_by
  id: order_by
  name: order_by
  order: order_by
  original_content: order_by
  owner_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type articles_min_fields {
  base_id: uuid
  category_id: uuid
  content: String
  created_at: timestamptz
  deleted_at: timestamptz
  external_url: String
  id: uuid
  name: String
  order: Int
  original_content: String
  owner_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "articles"
"""
input articles_min_order_by {
  base_id: order_by
  category_id: order_by
  content: order_by
  created_at: order_by
  deleted_at: order_by
  external_url: order_by
  id: order_by
  name: order_by
  order: order_by
  original_content: order_by
  owner_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "articles"
"""
type articles_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [articles!]!
}

"""
input type for inserting object relation for remote table "articles"
"""
input articles_obj_rel_insert_input {
  data: articles_insert_input!
  on_conflict: articles_on_conflict
}

"""
on conflict condition type for table "articles"
"""
input articles_on_conflict {
  constraint: articles_constraint!
  update_columns: [articles_update_column!]!
  where: articles_bool_exp
}

"""
ordering options when selecting data from "articles"
"""
input articles_order_by {
  article_type: article_type_order_by
  base: bases_order_by
  base_id: order_by
  category: categories_of_articles_order_by
  category_id: order_by
  comments_aggregate: comments_aggregate_order_by
  content: order_by
  created_at: order_by
  deleted_at: order_by
  external_url: order_by
  favorites_aggregate: favorites_aggregate_order_by
  id: order_by
  name: order_by
  order: order_by
  original_content: order_by
  owner: users_order_by
  owner_id: order_by
  read_aggregate: users_read_articles_aggregate_order_by
  tags_aggregate: articles_tags_aggregate_order_by
  type: order_by
  updated_at: order_by
  use_editor: order_by
}

"""
primary key columns input for table: "articles"
"""
input articles_pk_columns_input {
  id: uuid!
}

"""
select columns of table "articles"
"""
enum articles_select_column {
  """column name"""
  base_id

  """column name"""
  category_id

  """column name"""
  content

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  external_url

  """column name"""
  id

  """column name"""
  name

  """column name"""
  order

  """column name"""
  original_content

  """column name"""
  owner_id

  """column name"""
  type

  """column name"""
  updated_at

  """column name"""
  use_editor
}

"""
input type for updating data in table "articles"
"""
input articles_set_input {
  base_id: uuid
  category_id: uuid
  content: String
  created_at: timestamptz
  deleted_at: timestamptz
  external_url: String
  id: uuid
  name: String
  order: Int
  original_content: String
  owner_id: uuid
  type: article_type_enum
  updated_at: timestamptz
  use_editor: Boolean
}

"""aggregate stddev on columns"""
type articles_stddev_fields {
  order: Float
}

"""
order by stddev() on columns of table "articles"
"""
input articles_stddev_order_by {
  order: order_by
}

"""aggregate stddev_pop on columns"""
type articles_stddev_pop_fields {
  order: Float
}

"""
order by stddev_pop() on columns of table "articles"
"""
input articles_stddev_pop_order_by {
  order: order_by
}

"""aggregate stddev_samp on columns"""
type articles_stddev_samp_fields {
  order: Float
}

"""
order by stddev_samp() on columns of table "articles"
"""
input articles_stddev_samp_order_by {
  order: order_by
}

"""aggregate sum on columns"""
type articles_sum_fields {
  order: Int
}

"""
order by sum() on columns of table "articles"
"""
input articles_sum_order_by {
  order: order_by
}

"""
Теги статей


columns and relationships of "articles_tags"

"""
type articles_tags {
  """An object relationship"""
  article: articles!
  article_id: uuid!
  tag: String!

  """An object relationship"""
  tag_item: tags!
}

"""
aggregated selection of "articles_tags"
"""
type articles_tags_aggregate {
  aggregate: articles_tags_aggregate_fields
  nodes: [articles_tags!]!
}

"""
aggregate fields of "articles_tags"
"""
type articles_tags_aggregate_fields {
  count(columns: [articles_tags_select_column!], distinct: Boolean): Int
  max: articles_tags_max_fields
  min: articles_tags_min_fields
}

"""
order by aggregate values of table "articles_tags"
"""
input articles_tags_aggregate_order_by {
  count: order_by
  max: articles_tags_max_order_by
  min: articles_tags_min_order_by
}

"""
input type for inserting array relation for remote table "articles_tags"
"""
input articles_tags_arr_rel_insert_input {
  data: [articles_tags_insert_input!]!
  on_conflict: articles_tags_on_conflict
}

"""
Boolean expression to filter rows from the table "articles_tags". All fields are combined with a logical 'AND'.
"""
input articles_tags_bool_exp {
  _and: [articles_tags_bool_exp]
  _not: articles_tags_bool_exp
  _or: [articles_tags_bool_exp]
  article: articles_bool_exp
  article_id: uuid_comparison_exp
  tag: String_comparison_exp
  tag_item: tags_bool_exp
}

"""
unique or primary key constraints on table "articles_tags"
"""
enum articles_tags_constraint {
  """unique or primary key constraint"""
  articles_tags_pkey
}

"""
input type for inserting data into table "articles_tags"
"""
input articles_tags_insert_input {
  article: articles_obj_rel_insert_input
  article_id: uuid
  tag: String
  tag_item: tags_obj_rel_insert_input
}

"""aggregate max on columns"""
type articles_tags_max_fields {
  article_id: uuid
  tag: String
}

"""
order by max() on columns of table "articles_tags"
"""
input articles_tags_max_order_by {
  article_id: order_by
  tag: order_by
}

"""aggregate min on columns"""
type articles_tags_min_fields {
  article_id: uuid
  tag: String
}

"""
order by min() on columns of table "articles_tags"
"""
input articles_tags_min_order_by {
  article_id: order_by
  tag: order_by
}

"""
response of any mutation on the table "articles_tags"
"""
type articles_tags_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [articles_tags!]!
}

"""
input type for inserting object relation for remote table "articles_tags"
"""
input articles_tags_obj_rel_insert_input {
  data: articles_tags_insert_input!
  on_conflict: articles_tags_on_conflict
}

"""
on conflict condition type for table "articles_tags"
"""
input articles_tags_on_conflict {
  constraint: articles_tags_constraint!
  update_columns: [articles_tags_update_column!]!
  where: articles_tags_bool_exp
}

"""
ordering options when selecting data from "articles_tags"
"""
input articles_tags_order_by {
  article: articles_order_by
  article_id: order_by
  tag: order_by
  tag_item: tags_order_by
}

"""
primary key columns input for table: "articles_tags"
"""
input articles_tags_pk_columns_input {
  article_id: uuid!
  tag: String!
}

"""
select columns of table "articles_tags"
"""
enum articles_tags_select_column {
  """column name"""
  article_id

  """column name"""
  tag
}

"""
input type for updating data in table "articles_tags"
"""
input articles_tags_set_input {
  article_id: uuid
  tag: String
}

"""
update columns of table "articles_tags"
"""
enum articles_tags_update_column {
  """column name"""
  article_id

  """column name"""
  tag
}

"""
update columns of table "articles"
"""
enum articles_update_column {
  """column name"""
  base_id

  """column name"""
  category_id

  """column name"""
  content

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  external_url

  """column name"""
  id

  """column name"""
  name

  """column name"""
  order

  """column name"""
  original_content

  """column name"""
  owner_id

  """column name"""
  type

  """column name"""
  updated_at

  """column name"""
  use_editor
}

"""aggregate var_pop on columns"""
type articles_var_pop_fields {
  order: Float
}

"""
order by var_pop() on columns of table "articles"
"""
input articles_var_pop_order_by {
  order: order_by
}

"""aggregate var_samp on columns"""
type articles_var_samp_fields {
  order: Float
}

"""
order by var_samp() on columns of table "articles"
"""
input articles_var_samp_order_by {
  order: order_by
}

"""aggregate variance on columns"""
type articles_variance_fields {
  order: Float
}

"""
order by variance() on columns of table "articles"
"""
input articles_variance_order_by {
  order: order_by
}

"""
columns and relationships of "auth.account_providers"
"""
type auth_account_providers {
  """An object relationship"""
  account: auth_accounts!
  account_id: uuid!
  auth_provider: String!
  auth_provider_unique_id: String!
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  provider: auth_providers!
  updated_at: timestamptz!
}

"""
aggregated selection of "auth.account_providers"
"""
type auth_account_providers_aggregate {
  aggregate: auth_account_providers_aggregate_fields
  nodes: [auth_account_providers!]!
}

"""
aggregate fields of "auth.account_providers"
"""
type auth_account_providers_aggregate_fields {
  count(columns: [auth_account_providers_select_column!], distinct: Boolean): Int
  max: auth_account_providers_max_fields
  min: auth_account_providers_min_fields
}

"""
order by aggregate values of table "auth.account_providers"
"""
input auth_account_providers_aggregate_order_by {
  count: order_by
  max: auth_account_providers_max_order_by
  min: auth_account_providers_min_order_by
}

"""
input type for inserting array relation for remote table "auth.account_providers"
"""
input auth_account_providers_arr_rel_insert_input {
  data: [auth_account_providers_insert_input!]!
  on_conflict: auth_account_providers_on_conflict
}

"""
Boolean expression to filter rows from the table "auth.account_providers". All fields are combined with a logical 'AND'.
"""
input auth_account_providers_bool_exp {
  _and: [auth_account_providers_bool_exp]
  _not: auth_account_providers_bool_exp
  _or: [auth_account_providers_bool_exp]
  account: auth_accounts_bool_exp
  account_id: uuid_comparison_exp
  auth_provider: String_comparison_exp
  auth_provider_unique_id: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  provider: auth_providers_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "auth.account_providers"
"""
enum auth_account_providers_constraint {
  """unique or primary key constraint"""
  account_providers_account_id_auth_provider_key

  """unique or primary key constraint"""
  account_providers_auth_provider_auth_provider_unique_id_key

  """unique or primary key constraint"""
  account_providers_pkey
}

"""
input type for inserting data into table "auth.account_providers"
"""
input auth_account_providers_insert_input {
  account: auth_accounts_obj_rel_insert_input
  account_id: uuid
  auth_provider: String
  auth_provider_unique_id: String
  created_at: timestamptz
  id: uuid
  provider: auth_providers_obj_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type auth_account_providers_max_fields {
  account_id: uuid
  auth_provider: String
  auth_provider_unique_id: String
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "auth.account_providers"
"""
input auth_account_providers_max_order_by {
  account_id: order_by
  auth_provider: order_by
  auth_provider_unique_id: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type auth_account_providers_min_fields {
  account_id: uuid
  auth_provider: String
  auth_provider_unique_id: String
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "auth.account_providers"
"""
input auth_account_providers_min_order_by {
  account_id: order_by
  auth_provider: order_by
  auth_provider_unique_id: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "auth.account_providers"
"""
type auth_account_providers_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [auth_account_providers!]!
}

"""
input type for inserting object relation for remote table "auth.account_providers"
"""
input auth_account_providers_obj_rel_insert_input {
  data: auth_account_providers_insert_input!
  on_conflict: auth_account_providers_on_conflict
}

"""
on conflict condition type for table "auth.account_providers"
"""
input auth_account_providers_on_conflict {
  constraint: auth_account_providers_constraint!
  update_columns: [auth_account_providers_update_column!]!
  where: auth_account_providers_bool_exp
}

"""
ordering options when selecting data from "auth.account_providers"
"""
input auth_account_providers_order_by {
  account: auth_accounts_order_by
  account_id: order_by
  auth_provider: order_by
  auth_provider_unique_id: order_by
  created_at: order_by
  id: order_by
  provider: auth_providers_order_by
  updated_at: order_by
}

"""
primary key columns input for table: "auth.account_providers"
"""
input auth_account_providers_pk_columns_input {
  id: uuid!
}

"""
select columns of table "auth.account_providers"
"""
enum auth_account_providers_select_column {
  """column name"""
  account_id

  """column name"""
  auth_provider

  """column name"""
  auth_provider_unique_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  updated_at
}

"""
input type for updating data in table "auth.account_providers"
"""
input auth_account_providers_set_input {
  account_id: uuid
  auth_provider: String
  auth_provider_unique_id: String
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
}

"""
update columns of table "auth.account_providers"
"""
enum auth_account_providers_update_column {
  """column name"""
  account_id

  """column name"""
  auth_provider

  """column name"""
  auth_provider_unique_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  updated_at
}

"""
columns and relationships of "auth.account_roles"
"""
type auth_account_roles {
  """An object relationship"""
  account: auth_accounts!
  account_id: uuid!
  created_at: timestamptz!
  id: uuid!
  role: String!

  """An object relationship"""
  roleByRole: auth_roles!
}

"""
aggregated selection of "auth.account_roles"
"""
type auth_account_roles_aggregate {
  aggregate: auth_account_roles_aggregate_fields
  nodes: [auth_account_roles!]!
}

"""
aggregate fields of "auth.account_roles"
"""
type auth_account_roles_aggregate_fields {
  count(columns: [auth_account_roles_select_column!], distinct: Boolean): Int
  max: auth_account_roles_max_fields
  min: auth_account_roles_min_fields
}

"""
order by aggregate values of table "auth.account_roles"
"""
input auth_account_roles_aggregate_order_by {
  count: order_by
  max: auth_account_roles_max_order_by
  min: auth_account_roles_min_order_by
}

"""
input type for inserting array relation for remote table "auth.account_roles"
"""
input auth_account_roles_arr_rel_insert_input {
  data: [auth_account_roles_insert_input!]!
  on_conflict: auth_account_roles_on_conflict
}

"""
Boolean expression to filter rows from the table "auth.account_roles". All fields are combined with a logical 'AND'.
"""
input auth_account_roles_bool_exp {
  _and: [auth_account_roles_bool_exp]
  _not: auth_account_roles_bool_exp
  _or: [auth_account_roles_bool_exp]
  account: auth_accounts_bool_exp
  account_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  role: String_comparison_exp
  roleByRole: auth_roles_bool_exp
}

"""
unique or primary key constraints on table "auth.account_roles"
"""
enum auth_account_roles_constraint {
  """unique or primary key constraint"""
  account_roles_pkey

  """unique or primary key constraint"""
  user_roles_account_id_role_key
}

"""
input type for inserting data into table "auth.account_roles"
"""
input auth_account_roles_insert_input {
  account: auth_accounts_obj_rel_insert_input
  account_id: uuid
  created_at: timestamptz
  id: uuid
  role: String
  roleByRole: auth_roles_obj_rel_insert_input
}

"""aggregate max on columns"""
type auth_account_roles_max_fields {
  account_id: uuid
  created_at: timestamptz
  id: uuid
  role: String
}

"""
order by max() on columns of table "auth.account_roles"
"""
input auth_account_roles_max_order_by {
  account_id: order_by
  created_at: order_by
  id: order_by
  role: order_by
}

"""aggregate min on columns"""
type auth_account_roles_min_fields {
  account_id: uuid
  created_at: timestamptz
  id: uuid
  role: String
}

"""
order by min() on columns of table "auth.account_roles"
"""
input auth_account_roles_min_order_by {
  account_id: order_by
  created_at: order_by
  id: order_by
  role: order_by
}

"""
response of any mutation on the table "auth.account_roles"
"""
type auth_account_roles_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [auth_account_roles!]!
}

"""
input type for inserting object relation for remote table "auth.account_roles"
"""
input auth_account_roles_obj_rel_insert_input {
  data: auth_account_roles_insert_input!
  on_conflict: auth_account_roles_on_conflict
}

"""
on conflict condition type for table "auth.account_roles"
"""
input auth_account_roles_on_conflict {
  constraint: auth_account_roles_constraint!
  update_columns: [auth_account_roles_update_column!]!
  where: auth_account_roles_bool_exp
}

"""
ordering options when selecting data from "auth.account_roles"
"""
input auth_account_roles_order_by {
  account: auth_accounts_order_by
  account_id: order_by
  created_at: order_by
  id: order_by
  role: order_by
  roleByRole: auth_roles_order_by
}

"""
primary key columns input for table: "auth.account_roles"
"""
input auth_account_roles_pk_columns_input {
  id: uuid!
}

"""
select columns of table "auth.account_roles"
"""
enum auth_account_roles_select_column {
  """column name"""
  account_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  role
}

"""
input type for updating data in table "auth.account_roles"
"""
input auth_account_roles_set_input {
  account_id: uuid
  created_at: timestamptz
  id: uuid
  role: String
}

"""
update columns of table "auth.account_roles"
"""
enum auth_account_roles_update_column {
  """column name"""
  account_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  role
}

"""
columns and relationships of "auth.accounts"
"""
type auth_accounts {
  """An array relationship"""
  account_providers(
    """distinct select on columns"""
    distinct_on: [auth_account_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_providers_order_by!]

    """filter the rows returned"""
    where: auth_account_providers_bool_exp
  ): [auth_account_providers!]!

  """An aggregated array relationship"""
  account_providers_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_account_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_providers_order_by!]

    """filter the rows returned"""
    where: auth_account_providers_bool_exp
  ): auth_account_providers_aggregate!

  """An array relationship"""
  account_roles(
    """distinct select on columns"""
    distinct_on: [auth_account_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_roles_order_by!]

    """filter the rows returned"""
    where: auth_account_roles_bool_exp
  ): [auth_account_roles!]!

  """An aggregated array relationship"""
  account_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_account_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_roles_order_by!]

    """filter the rows returned"""
    where: auth_account_roles_bool_exp
  ): auth_account_roles_aggregate!
  active: Boolean!
  created_at: timestamptz!
  custom_register_data(
    """JSON select path"""
    path: String
  ): jsonb
  default_role: String!
  email: citext
  firebase_uid: String
  id: uuid!
  is_anonymous: Boolean!
  mfa_enabled: Boolean!
  new_email: citext
  otp_secret: String
  password_hash: String
  phone_number: String

  """An array relationship"""
  refresh_tokens(
    """distinct select on columns"""
    distinct_on: [auth_refresh_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_refresh_tokens_order_by!]

    """filter the rows returned"""
    where: auth_refresh_tokens_bool_exp
  ): [auth_refresh_tokens!]!

  """An aggregated array relationship"""
  refresh_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_refresh_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_refresh_tokens_order_by!]

    """filter the rows returned"""
    where: auth_refresh_tokens_bool_exp
  ): auth_refresh_tokens_aggregate!

  """An object relationship"""
  role: auth_roles!
  ticket: uuid!
  ticket_expires_at: timestamptz!
  updated_at: timestamptz!

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "auth.accounts"
"""
type auth_accounts_aggregate {
  aggregate: auth_accounts_aggregate_fields
  nodes: [auth_accounts!]!
}

"""
aggregate fields of "auth.accounts"
"""
type auth_accounts_aggregate_fields {
  count(columns: [auth_accounts_select_column!], distinct: Boolean): Int
  max: auth_accounts_max_fields
  min: auth_accounts_min_fields
}

"""
order by aggregate values of table "auth.accounts"
"""
input auth_accounts_aggregate_order_by {
  count: order_by
  max: auth_accounts_max_order_by
  min: auth_accounts_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input auth_accounts_append_input {
  custom_register_data: jsonb
}

"""
input type for inserting array relation for remote table "auth.accounts"
"""
input auth_accounts_arr_rel_insert_input {
  data: [auth_accounts_insert_input!]!
  on_conflict: auth_accounts_on_conflict
}

"""
Boolean expression to filter rows from the table "auth.accounts". All fields are combined with a logical 'AND'.
"""
input auth_accounts_bool_exp {
  _and: [auth_accounts_bool_exp]
  _not: auth_accounts_bool_exp
  _or: [auth_accounts_bool_exp]
  account_providers: auth_account_providers_bool_exp
  account_roles: auth_account_roles_bool_exp
  active: Boolean_comparison_exp
  created_at: timestamptz_comparison_exp
  custom_register_data: jsonb_comparison_exp
  default_role: String_comparison_exp
  email: citext_comparison_exp
  firebase_uid: String_comparison_exp
  id: uuid_comparison_exp
  is_anonymous: Boolean_comparison_exp
  mfa_enabled: Boolean_comparison_exp
  new_email: citext_comparison_exp
  otp_secret: String_comparison_exp
  password_hash: String_comparison_exp
  phone_number: String_comparison_exp
  refresh_tokens: auth_refresh_tokens_bool_exp
  role: auth_roles_bool_exp
  ticket: uuid_comparison_exp
  ticket_expires_at: timestamptz_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "auth.accounts"
"""
enum auth_accounts_constraint {
  """unique or primary key constraint"""
  accounts_email_key

  """unique or primary key constraint"""
  accounts_new_email_key

  """unique or primary key constraint"""
  accounts_pkey

  """unique or primary key constraint"""
  accounts_user_id_key
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input auth_accounts_delete_at_path_input {
  custom_register_data: [String]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input auth_accounts_delete_elem_input {
  custom_register_data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input auth_accounts_delete_key_input {
  custom_register_data: String
}

"""
input type for inserting data into table "auth.accounts"
"""
input auth_accounts_insert_input {
  account_providers: auth_account_providers_arr_rel_insert_input
  account_roles: auth_account_roles_arr_rel_insert_input
  active: Boolean
  created_at: timestamptz
  custom_register_data: jsonb
  default_role: String
  email: citext
  firebase_uid: String
  id: uuid
  is_anonymous: Boolean
  mfa_enabled: Boolean
  new_email: citext
  otp_secret: String
  password_hash: String
  phone_number: String
  refresh_tokens: auth_refresh_tokens_arr_rel_insert_input
  role: auth_roles_obj_rel_insert_input
  ticket: uuid
  ticket_expires_at: timestamptz
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type auth_accounts_max_fields {
  created_at: timestamptz
  default_role: String
  email: citext
  firebase_uid: String
  id: uuid
  new_email: citext
  otp_secret: String
  password_hash: String
  phone_number: String
  ticket: uuid
  ticket_expires_at: timestamptz
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "auth.accounts"
"""
input auth_accounts_max_order_by {
  created_at: order_by
  default_role: order_by
  email: order_by
  firebase_uid: order_by
  id: order_by
  new_email: order_by
  otp_secret: order_by
  password_hash: order_by
  phone_number: order_by
  ticket: order_by
  ticket_expires_at: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type auth_accounts_min_fields {
  created_at: timestamptz
  default_role: String
  email: citext
  firebase_uid: String
  id: uuid
  new_email: citext
  otp_secret: String
  password_hash: String
  phone_number: String
  ticket: uuid
  ticket_expires_at: timestamptz
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "auth.accounts"
"""
input auth_accounts_min_order_by {
  created_at: order_by
  default_role: order_by
  email: order_by
  firebase_uid: order_by
  id: order_by
  new_email: order_by
  otp_secret: order_by
  password_hash: order_by
  phone_number: order_by
  ticket: order_by
  ticket_expires_at: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "auth.accounts"
"""
type auth_accounts_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [auth_accounts!]!
}

"""
input type for inserting object relation for remote table "auth.accounts"
"""
input auth_accounts_obj_rel_insert_input {
  data: auth_accounts_insert_input!
  on_conflict: auth_accounts_on_conflict
}

"""
on conflict condition type for table "auth.accounts"
"""
input auth_accounts_on_conflict {
  constraint: auth_accounts_constraint!
  update_columns: [auth_accounts_update_column!]!
  where: auth_accounts_bool_exp
}

"""
ordering options when selecting data from "auth.accounts"
"""
input auth_accounts_order_by {
  account_providers_aggregate: auth_account_providers_aggregate_order_by
  account_roles_aggregate: auth_account_roles_aggregate_order_by
  active: order_by
  created_at: order_by
  custom_register_data: order_by
  default_role: order_by
  email: order_by
  firebase_uid: order_by
  id: order_by
  is_anonymous: order_by
  mfa_enabled: order_by
  new_email: order_by
  otp_secret: order_by
  password_hash: order_by
  phone_number: order_by
  refresh_tokens_aggregate: auth_refresh_tokens_aggregate_order_by
  role: auth_roles_order_by
  ticket: order_by
  ticket_expires_at: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: "auth.accounts"
"""
input auth_accounts_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input auth_accounts_prepend_input {
  custom_register_data: jsonb
}

"""
select columns of table "auth.accounts"
"""
enum auth_accounts_select_column {
  """column name"""
  active

  """column name"""
  created_at

  """column name"""
  custom_register_data

  """column name"""
  default_role

  """column name"""
  email

  """column name"""
  firebase_uid

  """column name"""
  id

  """column name"""
  is_anonymous

  """column name"""
  mfa_enabled

  """column name"""
  new_email

  """column name"""
  otp_secret

  """column name"""
  password_hash

  """column name"""
  phone_number

  """column name"""
  ticket

  """column name"""
  ticket_expires_at

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "auth.accounts"
"""
input auth_accounts_set_input {
  active: Boolean
  created_at: timestamptz
  custom_register_data: jsonb
  default_role: String
  email: citext
  firebase_uid: String
  id: uuid
  is_anonymous: Boolean
  mfa_enabled: Boolean
  new_email: citext
  otp_secret: String
  password_hash: String
  phone_number: String
  ticket: uuid
  ticket_expires_at: timestamptz
  updated_at: timestamptz
  user_id: uuid
}

"""
update columns of table "auth.accounts"
"""
enum auth_accounts_update_column {
  """column name"""
  active

  """column name"""
  created_at

  """column name"""
  custom_register_data

  """column name"""
  default_role

  """column name"""
  email

  """column name"""
  firebase_uid

  """column name"""
  id

  """column name"""
  is_anonymous

  """column name"""
  mfa_enabled

  """column name"""
  new_email

  """column name"""
  otp_secret

  """column name"""
  password_hash

  """column name"""
  phone_number

  """column name"""
  ticket

  """column name"""
  ticket_expires_at

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
columns and relationships of "auth.providers"
"""
type auth_providers {
  """An array relationship"""
  account_providers(
    """distinct select on columns"""
    distinct_on: [auth_account_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_providers_order_by!]

    """filter the rows returned"""
    where: auth_account_providers_bool_exp
  ): [auth_account_providers!]!

  """An aggregated array relationship"""
  account_providers_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_account_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_providers_order_by!]

    """filter the rows returned"""
    where: auth_account_providers_bool_exp
  ): auth_account_providers_aggregate!
  provider: String!
}

"""
aggregated selection of "auth.providers"
"""
type auth_providers_aggregate {
  aggregate: auth_providers_aggregate_fields
  nodes: [auth_providers!]!
}

"""
aggregate fields of "auth.providers"
"""
type auth_providers_aggregate_fields {
  count(columns: [auth_providers_select_column!], distinct: Boolean): Int
  max: auth_providers_max_fields
  min: auth_providers_min_fields
}

"""
order by aggregate values of table "auth.providers"
"""
input auth_providers_aggregate_order_by {
  count: order_by
  max: auth_providers_max_order_by
  min: auth_providers_min_order_by
}

"""
input type for inserting array relation for remote table "auth.providers"
"""
input auth_providers_arr_rel_insert_input {
  data: [auth_providers_insert_input!]!
  on_conflict: auth_providers_on_conflict
}

"""
Boolean expression to filter rows from the table "auth.providers". All fields are combined with a logical 'AND'.
"""
input auth_providers_bool_exp {
  _and: [auth_providers_bool_exp]
  _not: auth_providers_bool_exp
  _or: [auth_providers_bool_exp]
  account_providers: auth_account_providers_bool_exp
  provider: String_comparison_exp
}

"""
unique or primary key constraints on table "auth.providers"
"""
enum auth_providers_constraint {
  """unique or primary key constraint"""
  providers_pkey
}

"""
input type for inserting data into table "auth.providers"
"""
input auth_providers_insert_input {
  account_providers: auth_account_providers_arr_rel_insert_input
  provider: String
}

"""aggregate max on columns"""
type auth_providers_max_fields {
  provider: String
}

"""
order by max() on columns of table "auth.providers"
"""
input auth_providers_max_order_by {
  provider: order_by
}

"""aggregate min on columns"""
type auth_providers_min_fields {
  provider: String
}

"""
order by min() on columns of table "auth.providers"
"""
input auth_providers_min_order_by {
  provider: order_by
}

"""
response of any mutation on the table "auth.providers"
"""
type auth_providers_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [auth_providers!]!
}

"""
input type for inserting object relation for remote table "auth.providers"
"""
input auth_providers_obj_rel_insert_input {
  data: auth_providers_insert_input!
  on_conflict: auth_providers_on_conflict
}

"""
on conflict condition type for table "auth.providers"
"""
input auth_providers_on_conflict {
  constraint: auth_providers_constraint!
  update_columns: [auth_providers_update_column!]!
  where: auth_providers_bool_exp
}

"""
ordering options when selecting data from "auth.providers"
"""
input auth_providers_order_by {
  account_providers_aggregate: auth_account_providers_aggregate_order_by
  provider: order_by
}

"""
primary key columns input for table: "auth.providers"
"""
input auth_providers_pk_columns_input {
  provider: String!
}

"""
select columns of table "auth.providers"
"""
enum auth_providers_select_column {
  """column name"""
  provider
}

"""
input type for updating data in table "auth.providers"
"""
input auth_providers_set_input {
  provider: String
}

"""
update columns of table "auth.providers"
"""
enum auth_providers_update_column {
  """column name"""
  provider
}

"""
columns and relationships of "auth.refresh_tokens"
"""
type auth_refresh_tokens {
  """An object relationship"""
  account: auth_accounts!
  account_id: uuid!
  created_at: timestamptz!
  expires_at: timestamptz!
  refresh_token: uuid!
}

"""
aggregated selection of "auth.refresh_tokens"
"""
type auth_refresh_tokens_aggregate {
  aggregate: auth_refresh_tokens_aggregate_fields
  nodes: [auth_refresh_tokens!]!
}

"""
aggregate fields of "auth.refresh_tokens"
"""
type auth_refresh_tokens_aggregate_fields {
  count(columns: [auth_refresh_tokens_select_column!], distinct: Boolean): Int
  max: auth_refresh_tokens_max_fields
  min: auth_refresh_tokens_min_fields
}

"""
order by aggregate values of table "auth.refresh_tokens"
"""
input auth_refresh_tokens_aggregate_order_by {
  count: order_by
  max: auth_refresh_tokens_max_order_by
  min: auth_refresh_tokens_min_order_by
}

"""
input type for inserting array relation for remote table "auth.refresh_tokens"
"""
input auth_refresh_tokens_arr_rel_insert_input {
  data: [auth_refresh_tokens_insert_input!]!
  on_conflict: auth_refresh_tokens_on_conflict
}

"""
Boolean expression to filter rows from the table "auth.refresh_tokens". All fields are combined with a logical 'AND'.
"""
input auth_refresh_tokens_bool_exp {
  _and: [auth_refresh_tokens_bool_exp]
  _not: auth_refresh_tokens_bool_exp
  _or: [auth_refresh_tokens_bool_exp]
  account: auth_accounts_bool_exp
  account_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  expires_at: timestamptz_comparison_exp
  refresh_token: uuid_comparison_exp
}

"""
unique or primary key constraints on table "auth.refresh_tokens"
"""
enum auth_refresh_tokens_constraint {
  """unique or primary key constraint"""
  refresh_tokens_pkey
}

"""
input type for inserting data into table "auth.refresh_tokens"
"""
input auth_refresh_tokens_insert_input {
  account: auth_accounts_obj_rel_insert_input
  account_id: uuid
  created_at: timestamptz
  expires_at: timestamptz
  refresh_token: uuid
}

"""aggregate max on columns"""
type auth_refresh_tokens_max_fields {
  account_id: uuid
  created_at: timestamptz
  expires_at: timestamptz
  refresh_token: uuid
}

"""
order by max() on columns of table "auth.refresh_tokens"
"""
input auth_refresh_tokens_max_order_by {
  account_id: order_by
  created_at: order_by
  expires_at: order_by
  refresh_token: order_by
}

"""aggregate min on columns"""
type auth_refresh_tokens_min_fields {
  account_id: uuid
  created_at: timestamptz
  expires_at: timestamptz
  refresh_token: uuid
}

"""
order by min() on columns of table "auth.refresh_tokens"
"""
input auth_refresh_tokens_min_order_by {
  account_id: order_by
  created_at: order_by
  expires_at: order_by
  refresh_token: order_by
}

"""
response of any mutation on the table "auth.refresh_tokens"
"""
type auth_refresh_tokens_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [auth_refresh_tokens!]!
}

"""
input type for inserting object relation for remote table "auth.refresh_tokens"
"""
input auth_refresh_tokens_obj_rel_insert_input {
  data: auth_refresh_tokens_insert_input!
  on_conflict: auth_refresh_tokens_on_conflict
}

"""
on conflict condition type for table "auth.refresh_tokens"
"""
input auth_refresh_tokens_on_conflict {
  constraint: auth_refresh_tokens_constraint!
  update_columns: [auth_refresh_tokens_update_column!]!
  where: auth_refresh_tokens_bool_exp
}

"""
ordering options when selecting data from "auth.refresh_tokens"
"""
input auth_refresh_tokens_order_by {
  account: auth_accounts_order_by
  account_id: order_by
  created_at: order_by
  expires_at: order_by
  refresh_token: order_by
}

"""
primary key columns input for table: "auth.refresh_tokens"
"""
input auth_refresh_tokens_pk_columns_input {
  refresh_token: uuid!
}

"""
select columns of table "auth.refresh_tokens"
"""
enum auth_refresh_tokens_select_column {
  """column name"""
  account_id

  """column name"""
  created_at

  """column name"""
  expires_at

  """column name"""
  refresh_token
}

"""
input type for updating data in table "auth.refresh_tokens"
"""
input auth_refresh_tokens_set_input {
  account_id: uuid
  created_at: timestamptz
  expires_at: timestamptz
  refresh_token: uuid
}

"""
update columns of table "auth.refresh_tokens"
"""
enum auth_refresh_tokens_update_column {
  """column name"""
  account_id

  """column name"""
  created_at

  """column name"""
  expires_at

  """column name"""
  refresh_token
}

"""
columns and relationships of "auth.roles"
"""
type auth_roles {
  """An array relationship"""
  account_roles(
    """distinct select on columns"""
    distinct_on: [auth_account_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_roles_order_by!]

    """filter the rows returned"""
    where: auth_account_roles_bool_exp
  ): [auth_account_roles!]!

  """An aggregated array relationship"""
  account_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_account_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_roles_order_by!]

    """filter the rows returned"""
    where: auth_account_roles_bool_exp
  ): auth_account_roles_aggregate!

  """An array relationship"""
  accounts(
    """distinct select on columns"""
    distinct_on: [auth_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_accounts_order_by!]

    """filter the rows returned"""
    where: auth_accounts_bool_exp
  ): [auth_accounts!]!

  """An aggregated array relationship"""
  accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_accounts_order_by!]

    """filter the rows returned"""
    where: auth_accounts_bool_exp
  ): auth_accounts_aggregate!
  role: String!
}

"""
aggregated selection of "auth.roles"
"""
type auth_roles_aggregate {
  aggregate: auth_roles_aggregate_fields
  nodes: [auth_roles!]!
}

"""
aggregate fields of "auth.roles"
"""
type auth_roles_aggregate_fields {
  count(columns: [auth_roles_select_column!], distinct: Boolean): Int
  max: auth_roles_max_fields
  min: auth_roles_min_fields
}

"""
order by aggregate values of table "auth.roles"
"""
input auth_roles_aggregate_order_by {
  count: order_by
  max: auth_roles_max_order_by
  min: auth_roles_min_order_by
}

"""
input type for inserting array relation for remote table "auth.roles"
"""
input auth_roles_arr_rel_insert_input {
  data: [auth_roles_insert_input!]!
  on_conflict: auth_roles_on_conflict
}

"""
Boolean expression to filter rows from the table "auth.roles". All fields are combined with a logical 'AND'.
"""
input auth_roles_bool_exp {
  _and: [auth_roles_bool_exp]
  _not: auth_roles_bool_exp
  _or: [auth_roles_bool_exp]
  account_roles: auth_account_roles_bool_exp
  accounts: auth_accounts_bool_exp
  role: String_comparison_exp
}

"""
unique or primary key constraints on table "auth.roles"
"""
enum auth_roles_constraint {
  """unique or primary key constraint"""
  roles_pkey
}

"""
input type for inserting data into table "auth.roles"
"""
input auth_roles_insert_input {
  account_roles: auth_account_roles_arr_rel_insert_input
  accounts: auth_accounts_arr_rel_insert_input
  role: String
}

"""aggregate max on columns"""
type auth_roles_max_fields {
  role: String
}

"""
order by max() on columns of table "auth.roles"
"""
input auth_roles_max_order_by {
  role: order_by
}

"""aggregate min on columns"""
type auth_roles_min_fields {
  role: String
}

"""
order by min() on columns of table "auth.roles"
"""
input auth_roles_min_order_by {
  role: order_by
}

"""
response of any mutation on the table "auth.roles"
"""
type auth_roles_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [auth_roles!]!
}

"""
input type for inserting object relation for remote table "auth.roles"
"""
input auth_roles_obj_rel_insert_input {
  data: auth_roles_insert_input!
  on_conflict: auth_roles_on_conflict
}

"""
on conflict condition type for table "auth.roles"
"""
input auth_roles_on_conflict {
  constraint: auth_roles_constraint!
  update_columns: [auth_roles_update_column!]!
  where: auth_roles_bool_exp
}

"""
ordering options when selecting data from "auth.roles"
"""
input auth_roles_order_by {
  account_roles_aggregate: auth_account_roles_aggregate_order_by
  accounts_aggregate: auth_accounts_aggregate_order_by
  role: order_by
}

"""
primary key columns input for table: "auth.roles"
"""
input auth_roles_pk_columns_input {
  role: String!
}

"""
select columns of table "auth.roles"
"""
enum auth_roles_select_column {
  """column name"""
  role
}

"""
input type for updating data in table "auth.roles"
"""
input auth_roles_set_input {
  role: String
}

"""
update columns of table "auth.roles"
"""
enum auth_roles_update_column {
  """column name"""
  role
}

"""
Базы


columns and relationships of "bases"

"""
type bases {
  address: String

  """An array relationship"""
  articles(
    """distinct select on columns"""
    distinct_on: [articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_order_by!]

    """filter the rows returned"""
    where: articles_bool_exp
  ): [articles!]!

  """An aggregated array relationship"""
  articles_aggregate(
    """distinct select on columns"""
    distinct_on: [articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_order_by!]

    """filter the rows returned"""
    where: articles_bool_exp
  ): articles_aggregate!

  """An array relationship"""
  categories_of_articles(
    """distinct select on columns"""
    distinct_on: [categories_of_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_of_articles_order_by!]

    """filter the rows returned"""
    where: categories_of_articles_bool_exp
  ): [categories_of_articles!]!

  """An aggregated array relationship"""
  categories_of_articles_aggregate(
    """distinct select on columns"""
    distinct_on: [categories_of_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_of_articles_order_by!]

    """filter the rows returned"""
    where: categories_of_articles_bool_exp
  ): categories_of_articles_aggregate!
  created_at: timestamptz!
  deleted_at: timestamptz

  """An array relationship"""
  departments(
    """distinct select on columns"""
    distinct_on: [departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [departments_order_by!]

    """filter the rows returned"""
    where: departments_bool_exp
  ): [departments!]!

  """An aggregated array relationship"""
  departments_aggregate(
    """distinct select on columns"""
    distinct_on: [departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [departments_order_by!]

    """filter the rows returned"""
    where: departments_bool_exp
  ): departments_aggregate!
  email: String
  id: uuid!
  image: String

  """An array relationship"""
  invites(
    """distinct select on columns"""
    distinct_on: [invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [invites_order_by!]

    """filter the rows returned"""
    where: invites_bool_exp
  ): [invites!]!

  """An aggregated array relationship"""
  invites_aggregate(
    """distinct select on columns"""
    distinct_on: [invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [invites_order_by!]

    """filter the rows returned"""
    where: invites_bool_exp
  ): invites_aggregate!
  name: String!

  """An object relationship"""
  owner: users!
  owner_id: uuid!

  """An array relationship"""
  permissions(
    """distinct select on columns"""
    distinct_on: [users_permissions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_permissions_order_by!]

    """filter the rows returned"""
    where: users_permissions_bool_exp
  ): [users_permissions!]!

  """An aggregated array relationship"""
  permissions_aggregate(
    """distinct select on columns"""
    distinct_on: [users_permissions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_permissions_order_by!]

    """filter the rows returned"""
    where: users_permissions_bool_exp
  ): users_permissions_aggregate!
  phone: String

  """An array relationship"""
  positions(
    """distinct select on columns"""
    distinct_on: [positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [positions_order_by!]

    """filter the rows returned"""
    where: positions_bool_exp
  ): [positions!]!

  """An aggregated array relationship"""
  positions_aggregate(
    """distinct select on columns"""
    distinct_on: [positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [positions_order_by!]

    """filter the rows returned"""
    where: positions_bool_exp
  ): positions_aggregate!
  site: String

  """An array relationship"""
  statuses(
    """distinct select on columns"""
    distinct_on: [statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [statuses_order_by!]

    """filter the rows returned"""
    where: statuses_bool_exp
  ): [statuses!]!

  """An aggregated array relationship"""
  statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [statuses_order_by!]

    """filter the rows returned"""
    where: statuses_bool_exp
  ): statuses_aggregate!
  updated_at: timestamptz!

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [users_in_bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_in_bases_order_by!]

    """filter the rows returned"""
    where: users_in_bases_bool_exp
  ): [users_in_bases!]!

  """An aggregated array relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_in_bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_in_bases_order_by!]

    """filter the rows returned"""
    where: users_in_bases_bool_exp
  ): users_in_bases_aggregate!
}

"""
aggregated selection of "bases"
"""
type bases_aggregate {
  aggregate: bases_aggregate_fields
  nodes: [bases!]!
}

"""
aggregate fields of "bases"
"""
type bases_aggregate_fields {
  count(columns: [bases_select_column!], distinct: Boolean): Int
  max: bases_max_fields
  min: bases_min_fields
}

"""
order by aggregate values of table "bases"
"""
input bases_aggregate_order_by {
  count: order_by
  max: bases_max_order_by
  min: bases_min_order_by
}

"""
input type for inserting array relation for remote table "bases"
"""
input bases_arr_rel_insert_input {
  data: [bases_insert_input!]!
  on_conflict: bases_on_conflict
}

"""
Boolean expression to filter rows from the table "bases". All fields are combined with a logical 'AND'.
"""
input bases_bool_exp {
  _and: [bases_bool_exp]
  _not: bases_bool_exp
  _or: [bases_bool_exp]
  address: String_comparison_exp
  articles: articles_bool_exp
  categories_of_articles: categories_of_articles_bool_exp
  created_at: timestamptz_comparison_exp
  deleted_at: timestamptz_comparison_exp
  departments: departments_bool_exp
  email: String_comparison_exp
  id: uuid_comparison_exp
  image: String_comparison_exp
  invites: invites_bool_exp
  name: String_comparison_exp
  owner: users_bool_exp
  owner_id: uuid_comparison_exp
  permissions: users_permissions_bool_exp
  phone: String_comparison_exp
  positions: positions_bool_exp
  site: String_comparison_exp
  statuses: statuses_bool_exp
  updated_at: timestamptz_comparison_exp
  users: users_in_bases_bool_exp
}

"""
unique or primary key constraints on table "bases"
"""
enum bases_constraint {
  """unique or primary key constraint"""
  bases_pkey
}

"""
input type for inserting data into table "bases"
"""
input bases_insert_input {
  address: String
  articles: articles_arr_rel_insert_input
  categories_of_articles: categories_of_articles_arr_rel_insert_input
  created_at: timestamptz
  deleted_at: timestamptz
  departments: departments_arr_rel_insert_input
  email: String
  id: uuid
  image: String
  invites: invites_arr_rel_insert_input
  name: String
  owner: users_obj_rel_insert_input
  owner_id: uuid
  permissions: users_permissions_arr_rel_insert_input
  phone: String
  positions: positions_arr_rel_insert_input
  site: String
  statuses: statuses_arr_rel_insert_input
  updated_at: timestamptz
  users: users_in_bases_arr_rel_insert_input
}

"""aggregate max on columns"""
type bases_max_fields {
  address: String
  created_at: timestamptz
  deleted_at: timestamptz
  email: String
  id: uuid
  image: String
  name: String
  owner_id: uuid
  phone: String
  site: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "bases"
"""
input bases_max_order_by {
  address: order_by
  created_at: order_by
  deleted_at: order_by
  email: order_by
  id: order_by
  image: order_by
  name: order_by
  owner_id: order_by
  phone: order_by
  site: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type bases_min_fields {
  address: String
  created_at: timestamptz
  deleted_at: timestamptz
  email: String
  id: uuid
  image: String
  name: String
  owner_id: uuid
  phone: String
  site: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "bases"
"""
input bases_min_order_by {
  address: order_by
  created_at: order_by
  deleted_at: order_by
  email: order_by
  id: order_by
  image: order_by
  name: order_by
  owner_id: order_by
  phone: order_by
  site: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "bases"
"""
type bases_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [bases!]!
}

"""
input type for inserting object relation for remote table "bases"
"""
input bases_obj_rel_insert_input {
  data: bases_insert_input!
  on_conflict: bases_on_conflict
}

"""
on conflict condition type for table "bases"
"""
input bases_on_conflict {
  constraint: bases_constraint!
  update_columns: [bases_update_column!]!
  where: bases_bool_exp
}

"""
ordering options when selecting data from "bases"
"""
input bases_order_by {
  address: order_by
  articles_aggregate: articles_aggregate_order_by
  categories_of_articles_aggregate: categories_of_articles_aggregate_order_by
  created_at: order_by
  deleted_at: order_by
  departments_aggregate: departments_aggregate_order_by
  email: order_by
  id: order_by
  image: order_by
  invites_aggregate: invites_aggregate_order_by
  name: order_by
  owner: users_order_by
  owner_id: order_by
  permissions_aggregate: users_permissions_aggregate_order_by
  phone: order_by
  positions_aggregate: positions_aggregate_order_by
  site: order_by
  statuses_aggregate: statuses_aggregate_order_by
  updated_at: order_by
  users_aggregate: users_in_bases_aggregate_order_by
}

"""
primary key columns input for table: "bases"
"""
input bases_pk_columns_input {
  id: uuid!
}

"""
select columns of table "bases"
"""
enum bases_select_column {
  """column name"""
  address

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  email

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name

  """column name"""
  owner_id

  """column name"""
  phone

  """column name"""
  site

  """column name"""
  updated_at
}

"""
input type for updating data in table "bases"
"""
input bases_set_input {
  address: String
  created_at: timestamptz
  deleted_at: timestamptz
  email: String
  id: uuid
  image: String
  name: String
  owner_id: uuid
  phone: String
  site: String
  updated_at: timestamptz
}

"""
update columns of table "bases"
"""
enum bases_update_column {
  """column name"""
  address

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  email

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name

  """column name"""
  owner_id

  """column name"""
  phone

  """column name"""
  site

  """column name"""
  updated_at
}

"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

"""
Разделы статей


columns and relationships of "categories_of_articles"

"""
type categories_of_articles {
  """An array relationship"""
  articles(
    """distinct select on columns"""
    distinct_on: [articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_order_by!]

    """filter the rows returned"""
    where: articles_bool_exp
  ): [articles!]!

  """An aggregated array relationship"""
  articles_aggregate(
    """distinct select on columns"""
    distinct_on: [articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_order_by!]

    """filter the rows returned"""
    where: articles_bool_exp
  ): articles_aggregate!

  """An object relationship"""
  base: bases!
  base_id: uuid!

  """An array relationship"""
  children(
    """distinct select on columns"""
    distinct_on: [categories_of_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_of_articles_order_by!]

    """filter the rows returned"""
    where: categories_of_articles_bool_exp
  ): [categories_of_articles!]!

  """An aggregated array relationship"""
  children_aggregate(
    """distinct select on columns"""
    distinct_on: [categories_of_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_of_articles_order_by!]

    """filter the rows returned"""
    where: categories_of_articles_bool_exp
  ): categories_of_articles_aggregate!
  created_at: timestamptz!
  id: uuid!
  name: String!
  order: Int!

  """An object relationship"""
  parent: categories_of_articles
  parent_id: uuid
  updated_at: timestamptz!
}

"""
aggregated selection of "categories_of_articles"
"""
type categories_of_articles_aggregate {
  aggregate: categories_of_articles_aggregate_fields
  nodes: [categories_of_articles!]!
}

"""
aggregate fields of "categories_of_articles"
"""
type categories_of_articles_aggregate_fields {
  avg: categories_of_articles_avg_fields
  count(columns: [categories_of_articles_select_column!], distinct: Boolean): Int
  max: categories_of_articles_max_fields
  min: categories_of_articles_min_fields
  stddev: categories_of_articles_stddev_fields
  stddev_pop: categories_of_articles_stddev_pop_fields
  stddev_samp: categories_of_articles_stddev_samp_fields
  sum: categories_of_articles_sum_fields
  var_pop: categories_of_articles_var_pop_fields
  var_samp: categories_of_articles_var_samp_fields
  variance: categories_of_articles_variance_fields
}

"""
order by aggregate values of table "categories_of_articles"
"""
input categories_of_articles_aggregate_order_by {
  avg: categories_of_articles_avg_order_by
  count: order_by
  max: categories_of_articles_max_order_by
  min: categories_of_articles_min_order_by
  stddev: categories_of_articles_stddev_order_by
  stddev_pop: categories_of_articles_stddev_pop_order_by
  stddev_samp: categories_of_articles_stddev_samp_order_by
  sum: categories_of_articles_sum_order_by
  var_pop: categories_of_articles_var_pop_order_by
  var_samp: categories_of_articles_var_samp_order_by
  variance: categories_of_articles_variance_order_by
}

"""
input type for inserting array relation for remote table "categories_of_articles"
"""
input categories_of_articles_arr_rel_insert_input {
  data: [categories_of_articles_insert_input!]!
  on_conflict: categories_of_articles_on_conflict
}

"""aggregate avg on columns"""
type categories_of_articles_avg_fields {
  order: Float
}

"""
order by avg() on columns of table "categories_of_articles"
"""
input categories_of_articles_avg_order_by {
  order: order_by
}

"""
Boolean expression to filter rows from the table "categories_of_articles". All fields are combined with a logical 'AND'.
"""
input categories_of_articles_bool_exp {
  _and: [categories_of_articles_bool_exp]
  _not: categories_of_articles_bool_exp
  _or: [categories_of_articles_bool_exp]
  articles: articles_bool_exp
  base: bases_bool_exp
  base_id: uuid_comparison_exp
  children: categories_of_articles_bool_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  order: Int_comparison_exp
  parent: categories_of_articles_bool_exp
  parent_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "categories_of_articles"
"""
enum categories_of_articles_constraint {
  """unique or primary key constraint"""
  categories_of_articles_base_id_name_key

  """unique or primary key constraint"""
  categories_pkey
}

"""
input type for incrementing integer column in table "categories_of_articles"
"""
input categories_of_articles_inc_input {
  order: Int
}

"""
input type for inserting data into table "categories_of_articles"
"""
input categories_of_articles_insert_input {
  articles: articles_arr_rel_insert_input
  base: bases_obj_rel_insert_input
  base_id: uuid
  children: categories_of_articles_arr_rel_insert_input
  created_at: timestamptz
  id: uuid
  name: String
  order: Int
  parent: categories_of_articles_obj_rel_insert_input
  parent_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type categories_of_articles_max_fields {
  base_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  order: Int
  parent_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "categories_of_articles"
"""
input categories_of_articles_max_order_by {
  base_id: order_by
  created_at: order_by
  id: order_by
  name: order_by
  order: order_by
  parent_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type categories_of_articles_min_fields {
  base_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  order: Int
  parent_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "categories_of_articles"
"""
input categories_of_articles_min_order_by {
  base_id: order_by
  created_at: order_by
  id: order_by
  name: order_by
  order: order_by
  parent_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "categories_of_articles"
"""
type categories_of_articles_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [categories_of_articles!]!
}

"""
input type for inserting object relation for remote table "categories_of_articles"
"""
input categories_of_articles_obj_rel_insert_input {
  data: categories_of_articles_insert_input!
  on_conflict: categories_of_articles_on_conflict
}

"""
on conflict condition type for table "categories_of_articles"
"""
input categories_of_articles_on_conflict {
  constraint: categories_of_articles_constraint!
  update_columns: [categories_of_articles_update_column!]!
  where: categories_of_articles_bool_exp
}

"""
ordering options when selecting data from "categories_of_articles"
"""
input categories_of_articles_order_by {
  articles_aggregate: articles_aggregate_order_by
  base: bases_order_by
  base_id: order_by
  children_aggregate: categories_of_articles_aggregate_order_by
  created_at: order_by
  id: order_by
  name: order_by
  order: order_by
  parent: categories_of_articles_order_by
  parent_id: order_by
  updated_at: order_by
}

"""
primary key columns input for table: "categories_of_articles"
"""
input categories_of_articles_pk_columns_input {
  id: uuid!
}

"""
select columns of table "categories_of_articles"
"""
enum categories_of_articles_select_column {
  """column name"""
  base_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  order

  """column name"""
  parent_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "categories_of_articles"
"""
input categories_of_articles_set_input {
  base_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  order: Int
  parent_id: uuid
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type categories_of_articles_stddev_fields {
  order: Float
}

"""
order by stddev() on columns of table "categories_of_articles"
"""
input categories_of_articles_stddev_order_by {
  order: order_by
}

"""aggregate stddev_pop on columns"""
type categories_of_articles_stddev_pop_fields {
  order: Float
}

"""
order by stddev_pop() on columns of table "categories_of_articles"
"""
input categories_of_articles_stddev_pop_order_by {
  order: order_by
}

"""aggregate stddev_samp on columns"""
type categories_of_articles_stddev_samp_fields {
  order: Float
}

"""
order by stddev_samp() on columns of table "categories_of_articles"
"""
input categories_of_articles_stddev_samp_order_by {
  order: order_by
}

"""aggregate sum on columns"""
type categories_of_articles_sum_fields {
  order: Int
}

"""
order by sum() on columns of table "categories_of_articles"
"""
input categories_of_articles_sum_order_by {
  order: order_by
}

"""
update columns of table "categories_of_articles"
"""
enum categories_of_articles_update_column {
  """column name"""
  base_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  order

  """column name"""
  parent_id

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type categories_of_articles_var_pop_fields {
  order: Float
}

"""
order by var_pop() on columns of table "categories_of_articles"
"""
input categories_of_articles_var_pop_order_by {
  order: order_by
}

"""aggregate var_samp on columns"""
type categories_of_articles_var_samp_fields {
  order: Float
}

"""
order by var_samp() on columns of table "categories_of_articles"
"""
input categories_of_articles_var_samp_order_by {
  order: order_by
}

"""aggregate variance on columns"""
type categories_of_articles_variance_fields {
  order: Float
}

"""
order by variance() on columns of table "categories_of_articles"
"""
input categories_of_articles_variance_order_by {
  order: order_by
}

scalar citext

"""
expression to compare columns of type citext. All fields are combined with logical 'AND'.
"""
input citext_comparison_exp {
  _eq: citext
  _gt: citext
  _gte: citext
  _ilike: String
  _in: [citext!]
  _is_null: Boolean
  _like: String
  _lt: citext
  _lte: citext
  _neq: citext
  _nilike: String
  _nin: [citext!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""
Комментарии


columns and relationships of "comments"

"""
type comments {
  """An object relationship"""
  article: articles
  article_id: uuid

  """An array relationship"""
  children(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): [comments!]!

  """An aggregated array relationship"""
  children_aggregate(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): comments_aggregate!
  comment: String!
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  parent: comments
  parent_id: uuid
  rating: Int!
  updated_at: timestamptz!

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "comments"
"""
type comments_aggregate {
  aggregate: comments_aggregate_fields
  nodes: [comments!]!
}

"""
aggregate fields of "comments"
"""
type comments_aggregate_fields {
  avg: comments_avg_fields
  count(columns: [comments_select_column!], distinct: Boolean): Int
  max: comments_max_fields
  min: comments_min_fields
  stddev: comments_stddev_fields
  stddev_pop: comments_stddev_pop_fields
  stddev_samp: comments_stddev_samp_fields
  sum: comments_sum_fields
  var_pop: comments_var_pop_fields
  var_samp: comments_var_samp_fields
  variance: comments_variance_fields
}

"""
order by aggregate values of table "comments"
"""
input comments_aggregate_order_by {
  avg: comments_avg_order_by
  count: order_by
  max: comments_max_order_by
  min: comments_min_order_by
  stddev: comments_stddev_order_by
  stddev_pop: comments_stddev_pop_order_by
  stddev_samp: comments_stddev_samp_order_by
  sum: comments_sum_order_by
  var_pop: comments_var_pop_order_by
  var_samp: comments_var_samp_order_by
  variance: comments_variance_order_by
}

"""
input type for inserting array relation for remote table "comments"
"""
input comments_arr_rel_insert_input {
  data: [comments_insert_input!]!
  on_conflict: comments_on_conflict
}

"""aggregate avg on columns"""
type comments_avg_fields {
  rating: Float
}

"""
order by avg() on columns of table "comments"
"""
input comments_avg_order_by {
  rating: order_by
}

"""
Boolean expression to filter rows from the table "comments". All fields are combined with a logical 'AND'.
"""
input comments_bool_exp {
  _and: [comments_bool_exp]
  _not: comments_bool_exp
  _or: [comments_bool_exp]
  article: articles_bool_exp
  article_id: uuid_comparison_exp
  children: comments_bool_exp
  comment: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  parent: comments_bool_exp
  parent_id: uuid_comparison_exp
  rating: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "comments"
"""
enum comments_constraint {
  """unique or primary key constraint"""
  comment_pkey
}

"""
input type for incrementing integer column in table "comments"
"""
input comments_inc_input {
  rating: Int
}

"""
input type for inserting data into table "comments"
"""
input comments_insert_input {
  article: articles_obj_rel_insert_input
  article_id: uuid
  children: comments_arr_rel_insert_input
  comment: String
  created_at: timestamptz
  id: uuid
  parent: comments_obj_rel_insert_input
  parent_id: uuid
  rating: Int
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type comments_max_fields {
  article_id: uuid
  comment: String
  created_at: timestamptz
  id: uuid
  parent_id: uuid
  rating: Int
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "comments"
"""
input comments_max_order_by {
  article_id: order_by
  comment: order_by
  created_at: order_by
  id: order_by
  parent_id: order_by
  rating: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type comments_min_fields {
  article_id: uuid
  comment: String
  created_at: timestamptz
  id: uuid
  parent_id: uuid
  rating: Int
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "comments"
"""
input comments_min_order_by {
  article_id: order_by
  comment: order_by
  created_at: order_by
  id: order_by
  parent_id: order_by
  rating: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "comments"
"""
type comments_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [comments!]!
}

"""
input type for inserting object relation for remote table "comments"
"""
input comments_obj_rel_insert_input {
  data: comments_insert_input!
  on_conflict: comments_on_conflict
}

"""
on conflict condition type for table "comments"
"""
input comments_on_conflict {
  constraint: comments_constraint!
  update_columns: [comments_update_column!]!
  where: comments_bool_exp
}

"""
ordering options when selecting data from "comments"
"""
input comments_order_by {
  article: articles_order_by
  article_id: order_by
  children_aggregate: comments_aggregate_order_by
  comment: order_by
  created_at: order_by
  id: order_by
  parent: comments_order_by
  parent_id: order_by
  rating: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: "comments"
"""
input comments_pk_columns_input {
  id: uuid!
}

"""
select columns of table "comments"
"""
enum comments_select_column {
  """column name"""
  article_id

  """column name"""
  comment

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  parent_id

  """column name"""
  rating

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "comments"
"""
input comments_set_input {
  article_id: uuid
  comment: String
  created_at: timestamptz
  id: uuid
  parent_id: uuid
  rating: Int
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate stddev on columns"""
type comments_stddev_fields {
  rating: Float
}

"""
order by stddev() on columns of table "comments"
"""
input comments_stddev_order_by {
  rating: order_by
}

"""aggregate stddev_pop on columns"""
type comments_stddev_pop_fields {
  rating: Float
}

"""
order by stddev_pop() on columns of table "comments"
"""
input comments_stddev_pop_order_by {
  rating: order_by
}

"""aggregate stddev_samp on columns"""
type comments_stddev_samp_fields {
  rating: Float
}

"""
order by stddev_samp() on columns of table "comments"
"""
input comments_stddev_samp_order_by {
  rating: order_by
}

"""aggregate sum on columns"""
type comments_sum_fields {
  rating: Int
}

"""
order by sum() on columns of table "comments"
"""
input comments_sum_order_by {
  rating: order_by
}

"""
update columns of table "comments"
"""
enum comments_update_column {
  """column name"""
  article_id

  """column name"""
  comment

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  parent_id

  """column name"""
  rating

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""aggregate var_pop on columns"""
type comments_var_pop_fields {
  rating: Float
}

"""
order by var_pop() on columns of table "comments"
"""
input comments_var_pop_order_by {
  rating: order_by
}

"""aggregate var_samp on columns"""
type comments_var_samp_fields {
  rating: Float
}

"""
order by var_samp() on columns of table "comments"
"""
input comments_var_samp_order_by {
  rating: order_by
}

"""aggregate variance on columns"""
type comments_variance_fields {
  rating: Float
}

"""
order by variance() on columns of table "comments"
"""
input comments_variance_order_by {
  rating: order_by
}

"""
Категории статей по умолчанию


columns and relationships of "default_categories_of_articles"

"""
type default_categories_of_articles {
  id: uuid!
  name: String!
  order: Int!
}

"""
aggregated selection of "default_categories_of_articles"
"""
type default_categories_of_articles_aggregate {
  aggregate: default_categories_of_articles_aggregate_fields
  nodes: [default_categories_of_articles!]!
}

"""
aggregate fields of "default_categories_of_articles"
"""
type default_categories_of_articles_aggregate_fields {
  avg: default_categories_of_articles_avg_fields
  count(columns: [default_categories_of_articles_select_column!], distinct: Boolean): Int
  max: default_categories_of_articles_max_fields
  min: default_categories_of_articles_min_fields
  stddev: default_categories_of_articles_stddev_fields
  stddev_pop: default_categories_of_articles_stddev_pop_fields
  stddev_samp: default_categories_of_articles_stddev_samp_fields
  sum: default_categories_of_articles_sum_fields
  var_pop: default_categories_of_articles_var_pop_fields
  var_samp: default_categories_of_articles_var_samp_fields
  variance: default_categories_of_articles_variance_fields
}

"""
order by aggregate values of table "default_categories_of_articles"
"""
input default_categories_of_articles_aggregate_order_by {
  avg: default_categories_of_articles_avg_order_by
  count: order_by
  max: default_categories_of_articles_max_order_by
  min: default_categories_of_articles_min_order_by
  stddev: default_categories_of_articles_stddev_order_by
  stddev_pop: default_categories_of_articles_stddev_pop_order_by
  stddev_samp: default_categories_of_articles_stddev_samp_order_by
  sum: default_categories_of_articles_sum_order_by
  var_pop: default_categories_of_articles_var_pop_order_by
  var_samp: default_categories_of_articles_var_samp_order_by
  variance: default_categories_of_articles_variance_order_by
}

"""
input type for inserting array relation for remote table "default_categories_of_articles"
"""
input default_categories_of_articles_arr_rel_insert_input {
  data: [default_categories_of_articles_insert_input!]!
  on_conflict: default_categories_of_articles_on_conflict
}

"""aggregate avg on columns"""
type default_categories_of_articles_avg_fields {
  order: Float
}

"""
order by avg() on columns of table "default_categories_of_articles"
"""
input default_categories_of_articles_avg_order_by {
  order: order_by
}

"""
Boolean expression to filter rows from the table
"default_categories_of_articles". All fields are combined with a logical 'AND'.
"""
input default_categories_of_articles_bool_exp {
  _and: [default_categories_of_articles_bool_exp]
  _not: default_categories_of_articles_bool_exp
  _or: [default_categories_of_articles_bool_exp]
  id: uuid_comparison_exp
  name: String_comparison_exp
  order: Int_comparison_exp
}

"""
unique or primary key constraints on table "default_categories_of_articles"
"""
enum default_categories_of_articles_constraint {
  """unique or primary key constraint"""
  default_categories_of_articles_pkey
}

"""
input type for incrementing integer column in table "default_categories_of_articles"
"""
input default_categories_of_articles_inc_input {
  order: Int
}

"""
input type for inserting data into table "default_categories_of_articles"
"""
input default_categories_of_articles_insert_input {
  id: uuid
  name: String
  order: Int
}

"""aggregate max on columns"""
type default_categories_of_articles_max_fields {
  id: uuid
  name: String
  order: Int
}

"""
order by max() on columns of table "default_categories_of_articles"
"""
input default_categories_of_articles_max_order_by {
  id: order_by
  name: order_by
  order: order_by
}

"""aggregate min on columns"""
type default_categories_of_articles_min_fields {
  id: uuid
  name: String
  order: Int
}

"""
order by min() on columns of table "default_categories_of_articles"
"""
input default_categories_of_articles_min_order_by {
  id: order_by
  name: order_by
  order: order_by
}

"""
response of any mutation on the table "default_categories_of_articles"
"""
type default_categories_of_articles_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [default_categories_of_articles!]!
}

"""
input type for inserting object relation for remote table "default_categories_of_articles"
"""
input default_categories_of_articles_obj_rel_insert_input {
  data: default_categories_of_articles_insert_input!
  on_conflict: default_categories_of_articles_on_conflict
}

"""
on conflict condition type for table "default_categories_of_articles"
"""
input default_categories_of_articles_on_conflict {
  constraint: default_categories_of_articles_constraint!
  update_columns: [default_categories_of_articles_update_column!]!
  where: default_categories_of_articles_bool_exp
}

"""
ordering options when selecting data from "default_categories_of_articles"
"""
input default_categories_of_articles_order_by {
  id: order_by
  name: order_by
  order: order_by
}

"""
primary key columns input for table: "default_categories_of_articles"
"""
input default_categories_of_articles_pk_columns_input {
  id: uuid!
}

"""
select columns of table "default_categories_of_articles"
"""
enum default_categories_of_articles_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  order
}

"""
input type for updating data in table "default_categories_of_articles"
"""
input default_categories_of_articles_set_input {
  id: uuid
  name: String
  order: Int
}

"""aggregate stddev on columns"""
type default_categories_of_articles_stddev_fields {
  order: Float
}

"""
order by stddev() on columns of table "default_categories_of_articles"
"""
input default_categories_of_articles_stddev_order_by {
  order: order_by
}

"""aggregate stddev_pop on columns"""
type default_categories_of_articles_stddev_pop_fields {
  order: Float
}

"""
order by stddev_pop() on columns of table "default_categories_of_articles"
"""
input default_categories_of_articles_stddev_pop_order_by {
  order: order_by
}

"""aggregate stddev_samp on columns"""
type default_categories_of_articles_stddev_samp_fields {
  order: Float
}

"""
order by stddev_samp() on columns of table "default_categories_of_articles"
"""
input default_categories_of_articles_stddev_samp_order_by {
  order: order_by
}

"""aggregate sum on columns"""
type default_categories_of_articles_sum_fields {
  order: Int
}

"""
order by sum() on columns of table "default_categories_of_articles"
"""
input default_categories_of_articles_sum_order_by {
  order: order_by
}

"""
update columns of table "default_categories_of_articles"
"""
enum default_categories_of_articles_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  order
}

"""aggregate var_pop on columns"""
type default_categories_of_articles_var_pop_fields {
  order: Float
}

"""
order by var_pop() on columns of table "default_categories_of_articles"
"""
input default_categories_of_articles_var_pop_order_by {
  order: order_by
}

"""aggregate var_samp on columns"""
type default_categories_of_articles_var_samp_fields {
  order: Float
}

"""
order by var_samp() on columns of table "default_categories_of_articles"
"""
input default_categories_of_articles_var_samp_order_by {
  order: order_by
}

"""aggregate variance on columns"""
type default_categories_of_articles_variance_fields {
  order: Float
}

"""
order by variance() on columns of table "default_categories_of_articles"
"""
input default_categories_of_articles_variance_order_by {
  order: order_by
}

"""
Отделы при создании базы


columns and relationships of "default_departments"

"""
type default_departments {
  id: uuid!
  name: String!
  order: Int!
}

"""
aggregated selection of "default_departments"
"""
type default_departments_aggregate {
  aggregate: default_departments_aggregate_fields
  nodes: [default_departments!]!
}

"""
aggregate fields of "default_departments"
"""
type default_departments_aggregate_fields {
  avg: default_departments_avg_fields
  count(columns: [default_departments_select_column!], distinct: Boolean): Int
  max: default_departments_max_fields
  min: default_departments_min_fields
  stddev: default_departments_stddev_fields
  stddev_pop: default_departments_stddev_pop_fields
  stddev_samp: default_departments_stddev_samp_fields
  sum: default_departments_sum_fields
  var_pop: default_departments_var_pop_fields
  var_samp: default_departments_var_samp_fields
  variance: default_departments_variance_fields
}

"""
order by aggregate values of table "default_departments"
"""
input default_departments_aggregate_order_by {
  avg: default_departments_avg_order_by
  count: order_by
  max: default_departments_max_order_by
  min: default_departments_min_order_by
  stddev: default_departments_stddev_order_by
  stddev_pop: default_departments_stddev_pop_order_by
  stddev_samp: default_departments_stddev_samp_order_by
  sum: default_departments_sum_order_by
  var_pop: default_departments_var_pop_order_by
  var_samp: default_departments_var_samp_order_by
  variance: default_departments_variance_order_by
}

"""
input type for inserting array relation for remote table "default_departments"
"""
input default_departments_arr_rel_insert_input {
  data: [default_departments_insert_input!]!
  on_conflict: default_departments_on_conflict
}

"""aggregate avg on columns"""
type default_departments_avg_fields {
  order: Float
}

"""
order by avg() on columns of table "default_departments"
"""
input default_departments_avg_order_by {
  order: order_by
}

"""
Boolean expression to filter rows from the table "default_departments". All fields are combined with a logical 'AND'.
"""
input default_departments_bool_exp {
  _and: [default_departments_bool_exp]
  _not: default_departments_bool_exp
  _or: [default_departments_bool_exp]
  id: uuid_comparison_exp
  name: String_comparison_exp
  order: Int_comparison_exp
}

"""
unique or primary key constraints on table "default_departments"
"""
enum default_departments_constraint {
  """unique or primary key constraint"""
  default_departments_name_key

  """unique or primary key constraint"""
  default_departments_pkey
}

"""
input type for incrementing integer column in table "default_departments"
"""
input default_departments_inc_input {
  order: Int
}

"""
input type for inserting data into table "default_departments"
"""
input default_departments_insert_input {
  id: uuid
  name: String
  order: Int
}

"""aggregate max on columns"""
type default_departments_max_fields {
  id: uuid
  name: String
  order: Int
}

"""
order by max() on columns of table "default_departments"
"""
input default_departments_max_order_by {
  id: order_by
  name: order_by
  order: order_by
}

"""aggregate min on columns"""
type default_departments_min_fields {
  id: uuid
  name: String
  order: Int
}

"""
order by min() on columns of table "default_departments"
"""
input default_departments_min_order_by {
  id: order_by
  name: order_by
  order: order_by
}

"""
response of any mutation on the table "default_departments"
"""
type default_departments_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [default_departments!]!
}

"""
input type for inserting object relation for remote table "default_departments"
"""
input default_departments_obj_rel_insert_input {
  data: default_departments_insert_input!
  on_conflict: default_departments_on_conflict
}

"""
on conflict condition type for table "default_departments"
"""
input default_departments_on_conflict {
  constraint: default_departments_constraint!
  update_columns: [default_departments_update_column!]!
  where: default_departments_bool_exp
}

"""
ordering options when selecting data from "default_departments"
"""
input default_departments_order_by {
  id: order_by
  name: order_by
  order: order_by
}

"""
primary key columns input for table: "default_departments"
"""
input default_departments_pk_columns_input {
  id: uuid!
}

"""
select columns of table "default_departments"
"""
enum default_departments_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  order
}

"""
input type for updating data in table "default_departments"
"""
input default_departments_set_input {
  id: uuid
  name: String
  order: Int
}

"""aggregate stddev on columns"""
type default_departments_stddev_fields {
  order: Float
}

"""
order by stddev() on columns of table "default_departments"
"""
input default_departments_stddev_order_by {
  order: order_by
}

"""aggregate stddev_pop on columns"""
type default_departments_stddev_pop_fields {
  order: Float
}

"""
order by stddev_pop() on columns of table "default_departments"
"""
input default_departments_stddev_pop_order_by {
  order: order_by
}

"""aggregate stddev_samp on columns"""
type default_departments_stddev_samp_fields {
  order: Float
}

"""
order by stddev_samp() on columns of table "default_departments"
"""
input default_departments_stddev_samp_order_by {
  order: order_by
}

"""aggregate sum on columns"""
type default_departments_sum_fields {
  order: Int
}

"""
order by sum() on columns of table "default_departments"
"""
input default_departments_sum_order_by {
  order: order_by
}

"""
update columns of table "default_departments"
"""
enum default_departments_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  order
}

"""aggregate var_pop on columns"""
type default_departments_var_pop_fields {
  order: Float
}

"""
order by var_pop() on columns of table "default_departments"
"""
input default_departments_var_pop_order_by {
  order: order_by
}

"""aggregate var_samp on columns"""
type default_departments_var_samp_fields {
  order: Float
}

"""
order by var_samp() on columns of table "default_departments"
"""
input default_departments_var_samp_order_by {
  order: order_by
}

"""aggregate variance on columns"""
type default_departments_variance_fields {
  order: Float
}

"""
order by variance() on columns of table "default_departments"
"""
input default_departments_variance_order_by {
  order: order_by
}

"""
Должности при создании базы


columns and relationships of "default_positions"

"""
type default_positions {
  id: uuid!
  name: String!
  order: Int!
}

"""
aggregated selection of "default_positions"
"""
type default_positions_aggregate {
  aggregate: default_positions_aggregate_fields
  nodes: [default_positions!]!
}

"""
aggregate fields of "default_positions"
"""
type default_positions_aggregate_fields {
  avg: default_positions_avg_fields
  count(columns: [default_positions_select_column!], distinct: Boolean): Int
  max: default_positions_max_fields
  min: default_positions_min_fields
  stddev: default_positions_stddev_fields
  stddev_pop: default_positions_stddev_pop_fields
  stddev_samp: default_positions_stddev_samp_fields
  sum: default_positions_sum_fields
  var_pop: default_positions_var_pop_fields
  var_samp: default_positions_var_samp_fields
  variance: default_positions_variance_fields
}

"""
order by aggregate values of table "default_positions"
"""
input default_positions_aggregate_order_by {
  avg: default_positions_avg_order_by
  count: order_by
  max: default_positions_max_order_by
  min: default_positions_min_order_by
  stddev: default_positions_stddev_order_by
  stddev_pop: default_positions_stddev_pop_order_by
  stddev_samp: default_positions_stddev_samp_order_by
  sum: default_positions_sum_order_by
  var_pop: default_positions_var_pop_order_by
  var_samp: default_positions_var_samp_order_by
  variance: default_positions_variance_order_by
}

"""
input type for inserting array relation for remote table "default_positions"
"""
input default_positions_arr_rel_insert_input {
  data: [default_positions_insert_input!]!
  on_conflict: default_positions_on_conflict
}

"""aggregate avg on columns"""
type default_positions_avg_fields {
  order: Float
}

"""
order by avg() on columns of table "default_positions"
"""
input default_positions_avg_order_by {
  order: order_by
}

"""
Boolean expression to filter rows from the table "default_positions". All fields are combined with a logical 'AND'.
"""
input default_positions_bool_exp {
  _and: [default_positions_bool_exp]
  _not: default_positions_bool_exp
  _or: [default_positions_bool_exp]
  id: uuid_comparison_exp
  name: String_comparison_exp
  order: Int_comparison_exp
}

"""
unique or primary key constraints on table "default_positions"
"""
enum default_positions_constraint {
  """unique or primary key constraint"""
  default_positions_name_key

  """unique or primary key constraint"""
  default_positions_pkey
}

"""
input type for incrementing integer column in table "default_positions"
"""
input default_positions_inc_input {
  order: Int
}

"""
input type for inserting data into table "default_positions"
"""
input default_positions_insert_input {
  id: uuid
  name: String
  order: Int
}

"""aggregate max on columns"""
type default_positions_max_fields {
  id: uuid
  name: String
  order: Int
}

"""
order by max() on columns of table "default_positions"
"""
input default_positions_max_order_by {
  id: order_by
  name: order_by
  order: order_by
}

"""aggregate min on columns"""
type default_positions_min_fields {
  id: uuid
  name: String
  order: Int
}

"""
order by min() on columns of table "default_positions"
"""
input default_positions_min_order_by {
  id: order_by
  name: order_by
  order: order_by
}

"""
response of any mutation on the table "default_positions"
"""
type default_positions_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [default_positions!]!
}

"""
input type for inserting object relation for remote table "default_positions"
"""
input default_positions_obj_rel_insert_input {
  data: default_positions_insert_input!
  on_conflict: default_positions_on_conflict
}

"""
on conflict condition type for table "default_positions"
"""
input default_positions_on_conflict {
  constraint: default_positions_constraint!
  update_columns: [default_positions_update_column!]!
  where: default_positions_bool_exp
}

"""
ordering options when selecting data from "default_positions"
"""
input default_positions_order_by {
  id: order_by
  name: order_by
  order: order_by
}

"""
primary key columns input for table: "default_positions"
"""
input default_positions_pk_columns_input {
  id: uuid!
}

"""
select columns of table "default_positions"
"""
enum default_positions_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  order
}

"""
input type for updating data in table "default_positions"
"""
input default_positions_set_input {
  id: uuid
  name: String
  order: Int
}

"""aggregate stddev on columns"""
type default_positions_stddev_fields {
  order: Float
}

"""
order by stddev() on columns of table "default_positions"
"""
input default_positions_stddev_order_by {
  order: order_by
}

"""aggregate stddev_pop on columns"""
type default_positions_stddev_pop_fields {
  order: Float
}

"""
order by stddev_pop() on columns of table "default_positions"
"""
input default_positions_stddev_pop_order_by {
  order: order_by
}

"""aggregate stddev_samp on columns"""
type default_positions_stddev_samp_fields {
  order: Float
}

"""
order by stddev_samp() on columns of table "default_positions"
"""
input default_positions_stddev_samp_order_by {
  order: order_by
}

"""aggregate sum on columns"""
type default_positions_sum_fields {
  order: Int
}

"""
order by sum() on columns of table "default_positions"
"""
input default_positions_sum_order_by {
  order: order_by
}

"""
update columns of table "default_positions"
"""
enum default_positions_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  order
}

"""aggregate var_pop on columns"""
type default_positions_var_pop_fields {
  order: Float
}

"""
order by var_pop() on columns of table "default_positions"
"""
input default_positions_var_pop_order_by {
  order: order_by
}

"""aggregate var_samp on columns"""
type default_positions_var_samp_fields {
  order: Float
}

"""
order by var_samp() on columns of table "default_positions"
"""
input default_positions_var_samp_order_by {
  order: order_by
}

"""aggregate variance on columns"""
type default_positions_variance_fields {
  order: Float
}

"""
order by variance() on columns of table "default_positions"
"""
input default_positions_variance_order_by {
  order: order_by
}

"""
Статусы при создании базы


columns and relationships of "default_statuses"

"""
type default_statuses {
  id: uuid!
  name: String!
  order: Int!
}

"""
aggregated selection of "default_statuses"
"""
type default_statuses_aggregate {
  aggregate: default_statuses_aggregate_fields
  nodes: [default_statuses!]!
}

"""
aggregate fields of "default_statuses"
"""
type default_statuses_aggregate_fields {
  avg: default_statuses_avg_fields
  count(columns: [default_statuses_select_column!], distinct: Boolean): Int
  max: default_statuses_max_fields
  min: default_statuses_min_fields
  stddev: default_statuses_stddev_fields
  stddev_pop: default_statuses_stddev_pop_fields
  stddev_samp: default_statuses_stddev_samp_fields
  sum: default_statuses_sum_fields
  var_pop: default_statuses_var_pop_fields
  var_samp: default_statuses_var_samp_fields
  variance: default_statuses_variance_fields
}

"""
order by aggregate values of table "default_statuses"
"""
input default_statuses_aggregate_order_by {
  avg: default_statuses_avg_order_by
  count: order_by
  max: default_statuses_max_order_by
  min: default_statuses_min_order_by
  stddev: default_statuses_stddev_order_by
  stddev_pop: default_statuses_stddev_pop_order_by
  stddev_samp: default_statuses_stddev_samp_order_by
  sum: default_statuses_sum_order_by
  var_pop: default_statuses_var_pop_order_by
  var_samp: default_statuses_var_samp_order_by
  variance: default_statuses_variance_order_by
}

"""
input type for inserting array relation for remote table "default_statuses"
"""
input default_statuses_arr_rel_insert_input {
  data: [default_statuses_insert_input!]!
  on_conflict: default_statuses_on_conflict
}

"""aggregate avg on columns"""
type default_statuses_avg_fields {
  order: Float
}

"""
order by avg() on columns of table "default_statuses"
"""
input default_statuses_avg_order_by {
  order: order_by
}

"""
Boolean expression to filter rows from the table "default_statuses". All fields are combined with a logical 'AND'.
"""
input default_statuses_bool_exp {
  _and: [default_statuses_bool_exp]
  _not: default_statuses_bool_exp
  _or: [default_statuses_bool_exp]
  id: uuid_comparison_exp
  name: String_comparison_exp
  order: Int_comparison_exp
}

"""
unique or primary key constraints on table "default_statuses"
"""
enum default_statuses_constraint {
  """unique or primary key constraint"""
  default_statuses_name_key

  """unique or primary key constraint"""
  default_statuses_pkey
}

"""
input type for incrementing integer column in table "default_statuses"
"""
input default_statuses_inc_input {
  order: Int
}

"""
input type for inserting data into table "default_statuses"
"""
input default_statuses_insert_input {
  id: uuid
  name: String
  order: Int
}

"""aggregate max on columns"""
type default_statuses_max_fields {
  id: uuid
  name: String
  order: Int
}

"""
order by max() on columns of table "default_statuses"
"""
input default_statuses_max_order_by {
  id: order_by
  name: order_by
  order: order_by
}

"""aggregate min on columns"""
type default_statuses_min_fields {
  id: uuid
  name: String
  order: Int
}

"""
order by min() on columns of table "default_statuses"
"""
input default_statuses_min_order_by {
  id: order_by
  name: order_by
  order: order_by
}

"""
response of any mutation on the table "default_statuses"
"""
type default_statuses_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [default_statuses!]!
}

"""
input type for inserting object relation for remote table "default_statuses"
"""
input default_statuses_obj_rel_insert_input {
  data: default_statuses_insert_input!
  on_conflict: default_statuses_on_conflict
}

"""
on conflict condition type for table "default_statuses"
"""
input default_statuses_on_conflict {
  constraint: default_statuses_constraint!
  update_columns: [default_statuses_update_column!]!
  where: default_statuses_bool_exp
}

"""
ordering options when selecting data from "default_statuses"
"""
input default_statuses_order_by {
  id: order_by
  name: order_by
  order: order_by
}

"""
primary key columns input for table: "default_statuses"
"""
input default_statuses_pk_columns_input {
  id: uuid!
}

"""
select columns of table "default_statuses"
"""
enum default_statuses_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  order
}

"""
input type for updating data in table "default_statuses"
"""
input default_statuses_set_input {
  id: uuid
  name: String
  order: Int
}

"""aggregate stddev on columns"""
type default_statuses_stddev_fields {
  order: Float
}

"""
order by stddev() on columns of table "default_statuses"
"""
input default_statuses_stddev_order_by {
  order: order_by
}

"""aggregate stddev_pop on columns"""
type default_statuses_stddev_pop_fields {
  order: Float
}

"""
order by stddev_pop() on columns of table "default_statuses"
"""
input default_statuses_stddev_pop_order_by {
  order: order_by
}

"""aggregate stddev_samp on columns"""
type default_statuses_stddev_samp_fields {
  order: Float
}

"""
order by stddev_samp() on columns of table "default_statuses"
"""
input default_statuses_stddev_samp_order_by {
  order: order_by
}

"""aggregate sum on columns"""
type default_statuses_sum_fields {
  order: Int
}

"""
order by sum() on columns of table "default_statuses"
"""
input default_statuses_sum_order_by {
  order: order_by
}

"""
update columns of table "default_statuses"
"""
enum default_statuses_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  order
}

"""aggregate var_pop on columns"""
type default_statuses_var_pop_fields {
  order: Float
}

"""
order by var_pop() on columns of table "default_statuses"
"""
input default_statuses_var_pop_order_by {
  order: order_by
}

"""aggregate var_samp on columns"""
type default_statuses_var_samp_fields {
  order: Float
}

"""
order by var_samp() on columns of table "default_statuses"
"""
input default_statuses_var_samp_order_by {
  order: order_by
}

"""aggregate variance on columns"""
type default_statuses_variance_fields {
  order: Float
}

"""
order by variance() on columns of table "default_statuses"
"""
input default_statuses_variance_order_by {
  order: order_by
}

"""
Отделы


columns and relationships of "departments"

"""
type departments {
  """An object relationship"""
  base: bases!
  base_id: uuid!
  created_at: timestamptz!
  id: uuid!
  name: String!
  updated_at: timestamptz!

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [users_departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_departments_order_by!]

    """filter the rows returned"""
    where: users_departments_bool_exp
  ): [users_departments!]!

  """An aggregated array relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_departments_order_by!]

    """filter the rows returned"""
    where: users_departments_bool_exp
  ): users_departments_aggregate!
}

"""
aggregated selection of "departments"
"""
type departments_aggregate {
  aggregate: departments_aggregate_fields
  nodes: [departments!]!
}

"""
aggregate fields of "departments"
"""
type departments_aggregate_fields {
  count(columns: [departments_select_column!], distinct: Boolean): Int
  max: departments_max_fields
  min: departments_min_fields
}

"""
order by aggregate values of table "departments"
"""
input departments_aggregate_order_by {
  count: order_by
  max: departments_max_order_by
  min: departments_min_order_by
}

"""
input type for inserting array relation for remote table "departments"
"""
input departments_arr_rel_insert_input {
  data: [departments_insert_input!]!
  on_conflict: departments_on_conflict
}

"""
Boolean expression to filter rows from the table "departments". All fields are combined with a logical 'AND'.
"""
input departments_bool_exp {
  _and: [departments_bool_exp]
  _not: departments_bool_exp
  _or: [departments_bool_exp]
  base: bases_bool_exp
  base_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  users: users_departments_bool_exp
}

"""
unique or primary key constraints on table "departments"
"""
enum departments_constraint {
  """unique or primary key constraint"""
  departments_base_id_name_key

  """unique or primary key constraint"""
  departments_pkey
}

"""
input type for inserting data into table "departments"
"""
input departments_insert_input {
  base: bases_obj_rel_insert_input
  base_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
  users: users_departments_arr_rel_insert_input
}

"""aggregate max on columns"""
type departments_max_fields {
  base_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "departments"
"""
input departments_max_order_by {
  base_id: order_by
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type departments_min_fields {
  base_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "departments"
"""
input departments_min_order_by {
  base_id: order_by
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "departments"
"""
type departments_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [departments!]!
}

"""
input type for inserting object relation for remote table "departments"
"""
input departments_obj_rel_insert_input {
  data: departments_insert_input!
  on_conflict: departments_on_conflict
}

"""
on conflict condition type for table "departments"
"""
input departments_on_conflict {
  constraint: departments_constraint!
  update_columns: [departments_update_column!]!
  where: departments_bool_exp
}

"""
ordering options when selecting data from "departments"
"""
input departments_order_by {
  base: bases_order_by
  base_id: order_by
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
  users_aggregate: users_departments_aggregate_order_by
}

"""
primary key columns input for table: "departments"
"""
input departments_pk_columns_input {
  id: uuid!
}

"""
select columns of table "departments"
"""
enum departments_select_column {
  """column name"""
  base_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "departments"
"""
input departments_set_input {
  base_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
update columns of table "departments"
"""
enum departments_update_column {
  """column name"""
  base_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
Избранное


columns and relationships of "favorites"

"""
type favorites {
  """An object relationship"""
  article: articles!
  article_id: uuid!
  id: uuid!
  owner_id: uuid!

  """An object relationship"""
  user: users!
}

"""
aggregated selection of "favorites"
"""
type favorites_aggregate {
  aggregate: favorites_aggregate_fields
  nodes: [favorites!]!
}

"""
aggregate fields of "favorites"
"""
type favorites_aggregate_fields {
  count(columns: [favorites_select_column!], distinct: Boolean): Int
  max: favorites_max_fields
  min: favorites_min_fields
}

"""
order by aggregate values of table "favorites"
"""
input favorites_aggregate_order_by {
  count: order_by
  max: favorites_max_order_by
  min: favorites_min_order_by
}

"""
input type for inserting array relation for remote table "favorites"
"""
input favorites_arr_rel_insert_input {
  data: [favorites_insert_input!]!
  on_conflict: favorites_on_conflict
}

"""
Boolean expression to filter rows from the table "favorites". All fields are combined with a logical 'AND'.
"""
input favorites_bool_exp {
  _and: [favorites_bool_exp]
  _not: favorites_bool_exp
  _or: [favorites_bool_exp]
  article: articles_bool_exp
  article_id: uuid_comparison_exp
  id: uuid_comparison_exp
  owner_id: uuid_comparison_exp
  user: users_bool_exp
}

"""
unique or primary key constraints on table "favorites"
"""
enum favorites_constraint {
  """unique or primary key constraint"""
  favorites_owner_id_article_id_key

  """unique or primary key constraint"""
  favorites_pkey
}

"""
input type for inserting data into table "favorites"
"""
input favorites_insert_input {
  article: articles_obj_rel_insert_input
  article_id: uuid
  id: uuid
  owner_id: uuid
  user: users_obj_rel_insert_input
}

"""aggregate max on columns"""
type favorites_max_fields {
  article_id: uuid
  id: uuid
  owner_id: uuid
}

"""
order by max() on columns of table "favorites"
"""
input favorites_max_order_by {
  article_id: order_by
  id: order_by
  owner_id: order_by
}

"""aggregate min on columns"""
type favorites_min_fields {
  article_id: uuid
  id: uuid
  owner_id: uuid
}

"""
order by min() on columns of table "favorites"
"""
input favorites_min_order_by {
  article_id: order_by
  id: order_by
  owner_id: order_by
}

"""
response of any mutation on the table "favorites"
"""
type favorites_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [favorites!]!
}

"""
input type for inserting object relation for remote table "favorites"
"""
input favorites_obj_rel_insert_input {
  data: favorites_insert_input!
  on_conflict: favorites_on_conflict
}

"""
on conflict condition type for table "favorites"
"""
input favorites_on_conflict {
  constraint: favorites_constraint!
  update_columns: [favorites_update_column!]!
  where: favorites_bool_exp
}

"""
ordering options when selecting data from "favorites"
"""
input favorites_order_by {
  article: articles_order_by
  article_id: order_by
  id: order_by
  owner_id: order_by
  user: users_order_by
}

"""
primary key columns input for table: "favorites"
"""
input favorites_pk_columns_input {
  id: uuid!
}

"""
select columns of table "favorites"
"""
enum favorites_select_column {
  """column name"""
  article_id

  """column name"""
  id

  """column name"""
  owner_id
}

"""
input type for updating data in table "favorites"
"""
input favorites_set_input {
  article_id: uuid
  id: uuid
  owner_id: uuid
}

"""
update columns of table "favorites"
"""
enum favorites_update_column {
  """column name"""
  article_id

  """column name"""
  id

  """column name"""
  owner_id
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Инвайты


columns and relationships of "invites"

"""
type invites {
  """An object relationship"""
  base: bases!
  base_id: uuid!
  created_at: timestamptz!
  email: String
  id: uuid!
  permission: permission_enum!

  """An object relationship"""
  permission_item: permission!
  updated_at: timestamptz!
  user_id: uuid
}

"""
aggregated selection of "invites"
"""
type invites_aggregate {
  aggregate: invites_aggregate_fields
  nodes: [invites!]!
}

"""
aggregate fields of "invites"
"""
type invites_aggregate_fields {
  count(columns: [invites_select_column!], distinct: Boolean): Int
  max: invites_max_fields
  min: invites_min_fields
}

"""
order by aggregate values of table "invites"
"""
input invites_aggregate_order_by {
  count: order_by
  max: invites_max_order_by
  min: invites_min_order_by
}

"""
input type for inserting array relation for remote table "invites"
"""
input invites_arr_rel_insert_input {
  data: [invites_insert_input!]!
  on_conflict: invites_on_conflict
}

"""
Boolean expression to filter rows from the table "invites". All fields are combined with a logical 'AND'.
"""
input invites_bool_exp {
  _and: [invites_bool_exp]
  _not: invites_bool_exp
  _or: [invites_bool_exp]
  base: bases_bool_exp
  base_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  email: String_comparison_exp
  id: uuid_comparison_exp
  permission: permission_enum_comparison_exp
  permission_item: permission_bool_exp
  updated_at: timestamptz_comparison_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "invites"
"""
enum invites_constraint {
  """unique or primary key constraint"""
  invites_email_base_id_key

  """unique or primary key constraint"""
  invites_pkey

  """unique or primary key constraint"""
  invites_user_id_base_id_key
}

"""
input type for inserting data into table "invites"
"""
input invites_insert_input {
  base: bases_obj_rel_insert_input
  base_id: uuid
  created_at: timestamptz
  email: String
  id: uuid
  permission: permission_enum
  permission_item: permission_obj_rel_insert_input
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate max on columns"""
type invites_max_fields {
  base_id: uuid
  created_at: timestamptz
  email: String
  id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "invites"
"""
input invites_max_order_by {
  base_id: order_by
  created_at: order_by
  email: order_by
  id: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type invites_min_fields {
  base_id: uuid
  created_at: timestamptz
  email: String
  id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "invites"
"""
input invites_min_order_by {
  base_id: order_by
  created_at: order_by
  email: order_by
  id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "invites"
"""
type invites_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [invites!]!
}

"""
input type for inserting object relation for remote table "invites"
"""
input invites_obj_rel_insert_input {
  data: invites_insert_input!
  on_conflict: invites_on_conflict
}

"""
on conflict condition type for table "invites"
"""
input invites_on_conflict {
  constraint: invites_constraint!
  update_columns: [invites_update_column!]!
  where: invites_bool_exp
}

"""
ordering options when selecting data from "invites"
"""
input invites_order_by {
  base: bases_order_by
  base_id: order_by
  created_at: order_by
  email: order_by
  id: order_by
  permission: order_by
  permission_item: permission_order_by
  updated_at: order_by
  user_id: order_by
}

"""
primary key columns input for table: "invites"
"""
input invites_pk_columns_input {
  id: uuid!
}

"""
select columns of table "invites"
"""
enum invites_select_column {
  """column name"""
  base_id

  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  id

  """column name"""
  permission

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "invites"
"""
input invites_set_input {
  base_id: uuid
  created_at: timestamptz
  email: String
  id: uuid
  permission: permission_enum
  updated_at: timestamptz
  user_id: uuid
}

"""
update columns of table "invites"
"""
enum invites_update_column {
  """column name"""
  base_id

  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  id

  """column name"""
  permission

  """column name"""
  updated_at

  """column name"""
  user_id
}

scalar jsonb

"""
expression to compare columns of type jsonb. All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "access"
  """
  delete_access(
    """filter the rows which have to be deleted"""
    where: access_bool_exp!
  ): access_mutation_response

  """
  delete single row from the table: "access"
  """
  delete_access_by_pk(id: String!): access

  """
  delete data from the table: "article_type"
  """
  delete_article_type(
    """filter the rows which have to be deleted"""
    where: article_type_bool_exp!
  ): article_type_mutation_response

  """
  delete single row from the table: "article_type"
  """
  delete_article_type_by_pk(type: String!): article_type

  """
  delete data from the table: "articles"
  """
  delete_articles(
    """filter the rows which have to be deleted"""
    where: articles_bool_exp!
  ): articles_mutation_response

  """
  delete single row from the table: "articles"
  """
  delete_articles_by_pk(id: uuid!): articles

  """
  delete data from the table: "articles_tags"
  """
  delete_articles_tags(
    """filter the rows which have to be deleted"""
    where: articles_tags_bool_exp!
  ): articles_tags_mutation_response

  """
  delete single row from the table: "articles_tags"
  """
  delete_articles_tags_by_pk(article_id: uuid!, tag: String!): articles_tags

  """
  delete data from the table: "auth.account_providers"
  """
  delete_auth_account_providers(
    """filter the rows which have to be deleted"""
    where: auth_account_providers_bool_exp!
  ): auth_account_providers_mutation_response

  """
  delete single row from the table: "auth.account_providers"
  """
  delete_auth_account_providers_by_pk(id: uuid!): auth_account_providers

  """
  delete data from the table: "auth.account_roles"
  """
  delete_auth_account_roles(
    """filter the rows which have to be deleted"""
    where: auth_account_roles_bool_exp!
  ): auth_account_roles_mutation_response

  """
  delete single row from the table: "auth.account_roles"
  """
  delete_auth_account_roles_by_pk(id: uuid!): auth_account_roles

  """
  delete data from the table: "auth.accounts"
  """
  delete_auth_accounts(
    """filter the rows which have to be deleted"""
    where: auth_accounts_bool_exp!
  ): auth_accounts_mutation_response

  """
  delete single row from the table: "auth.accounts"
  """
  delete_auth_accounts_by_pk(id: uuid!): auth_accounts

  """
  delete data from the table: "auth.providers"
  """
  delete_auth_providers(
    """filter the rows which have to be deleted"""
    where: auth_providers_bool_exp!
  ): auth_providers_mutation_response

  """
  delete single row from the table: "auth.providers"
  """
  delete_auth_providers_by_pk(provider: String!): auth_providers

  """
  delete data from the table: "auth.refresh_tokens"
  """
  delete_auth_refresh_tokens(
    """filter the rows which have to be deleted"""
    where: auth_refresh_tokens_bool_exp!
  ): auth_refresh_tokens_mutation_response

  """
  delete single row from the table: "auth.refresh_tokens"
  """
  delete_auth_refresh_tokens_by_pk(refresh_token: uuid!): auth_refresh_tokens

  """
  delete data from the table: "auth.roles"
  """
  delete_auth_roles(
    """filter the rows which have to be deleted"""
    where: auth_roles_bool_exp!
  ): auth_roles_mutation_response

  """
  delete single row from the table: "auth.roles"
  """
  delete_auth_roles_by_pk(role: String!): auth_roles

  """
  delete data from the table: "bases"
  """
  delete_bases(
    """filter the rows which have to be deleted"""
    where: bases_bool_exp!
  ): bases_mutation_response

  """
  delete single row from the table: "bases"
  """
  delete_bases_by_pk(id: uuid!): bases

  """
  delete data from the table: "categories_of_articles"
  """
  delete_categories_of_articles(
    """filter the rows which have to be deleted"""
    where: categories_of_articles_bool_exp!
  ): categories_of_articles_mutation_response

  """
  delete single row from the table: "categories_of_articles"
  """
  delete_categories_of_articles_by_pk(id: uuid!): categories_of_articles

  """
  delete data from the table: "comments"
  """
  delete_comments(
    """filter the rows which have to be deleted"""
    where: comments_bool_exp!
  ): comments_mutation_response

  """
  delete single row from the table: "comments"
  """
  delete_comments_by_pk(id: uuid!): comments

  """
  delete data from the table: "default_categories_of_articles"
  """
  delete_default_categories_of_articles(
    """filter the rows which have to be deleted"""
    where: default_categories_of_articles_bool_exp!
  ): default_categories_of_articles_mutation_response

  """
  delete single row from the table: "default_categories_of_articles"
  """
  delete_default_categories_of_articles_by_pk(id: uuid!): default_categories_of_articles

  """
  delete data from the table: "default_departments"
  """
  delete_default_departments(
    """filter the rows which have to be deleted"""
    where: default_departments_bool_exp!
  ): default_departments_mutation_response

  """
  delete single row from the table: "default_departments"
  """
  delete_default_departments_by_pk(id: uuid!): default_departments

  """
  delete data from the table: "default_positions"
  """
  delete_default_positions(
    """filter the rows which have to be deleted"""
    where: default_positions_bool_exp!
  ): default_positions_mutation_response

  """
  delete single row from the table: "default_positions"
  """
  delete_default_positions_by_pk(id: uuid!): default_positions

  """
  delete data from the table: "default_statuses"
  """
  delete_default_statuses(
    """filter the rows which have to be deleted"""
    where: default_statuses_bool_exp!
  ): default_statuses_mutation_response

  """
  delete single row from the table: "default_statuses"
  """
  delete_default_statuses_by_pk(id: uuid!): default_statuses

  """
  delete data from the table: "departments"
  """
  delete_departments(
    """filter the rows which have to be deleted"""
    where: departments_bool_exp!
  ): departments_mutation_response

  """
  delete single row from the table: "departments"
  """
  delete_departments_by_pk(id: uuid!): departments

  """
  delete data from the table: "favorites"
  """
  delete_favorites(
    """filter the rows which have to be deleted"""
    where: favorites_bool_exp!
  ): favorites_mutation_response

  """
  delete single row from the table: "favorites"
  """
  delete_favorites_by_pk(id: uuid!): favorites

  """
  delete data from the table: "invites"
  """
  delete_invites(
    """filter the rows which have to be deleted"""
    where: invites_bool_exp!
  ): invites_mutation_response

  """
  delete single row from the table: "invites"
  """
  delete_invites_by_pk(id: uuid!): invites

  """
  delete data from the table: "permission"
  """
  delete_permission(
    """filter the rows which have to be deleted"""
    where: permission_bool_exp!
  ): permission_mutation_response

  """
  delete single row from the table: "permission"
  """
  delete_permission_by_pk(id: String!): permission

  """
  delete data from the table: "positions"
  """
  delete_positions(
    """filter the rows which have to be deleted"""
    where: positions_bool_exp!
  ): positions_mutation_response

  """
  delete single row from the table: "positions"
  """
  delete_positions_by_pk(id: uuid!): positions

  """
  delete data from the table: "statuses"
  """
  delete_statuses(
    """filter the rows which have to be deleted"""
    where: statuses_bool_exp!
  ): statuses_mutation_response

  """
  delete single row from the table: "statuses"
  """
  delete_statuses_by_pk(id: uuid!): statuses

  """
  delete data from the table: "tags"
  """
  delete_tags(
    """filter the rows which have to be deleted"""
    where: tags_bool_exp!
  ): tags_mutation_response

  """
  delete single row from the table: "tags"
  """
  delete_tags_by_pk(tag: String!): tags

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: uuid!): users

  """
  delete data from the table: "users_departments"
  """
  delete_users_departments(
    """filter the rows which have to be deleted"""
    where: users_departments_bool_exp!
  ): users_departments_mutation_response

  """
  delete single row from the table: "users_departments"
  """
  delete_users_departments_by_pk(id: uuid!): users_departments

  """
  delete data from the table: "users_in_bases"
  """
  delete_users_in_bases(
    """filter the rows which have to be deleted"""
    where: users_in_bases_bool_exp!
  ): users_in_bases_mutation_response

  """
  delete single row from the table: "users_in_bases"
  """
  delete_users_in_bases_by_pk(base_id: uuid!, user_id: uuid!): users_in_bases

  """
  delete data from the table: "users_permissions"
  """
  delete_users_permissions(
    """filter the rows which have to be deleted"""
    where: users_permissions_bool_exp!
  ): users_permissions_mutation_response

  """
  delete single row from the table: "users_permissions"
  """
  delete_users_permissions_by_pk(id: uuid!): users_permissions

  """
  delete data from the table: "users_positions"
  """
  delete_users_positions(
    """filter the rows which have to be deleted"""
    where: users_positions_bool_exp!
  ): users_positions_mutation_response

  """
  delete single row from the table: "users_positions"
  """
  delete_users_positions_by_pk(id: uuid!): users_positions

  """
  delete data from the table: "users_read_articles"
  """
  delete_users_read_articles(
    """filter the rows which have to be deleted"""
    where: users_read_articles_bool_exp!
  ): users_read_articles_mutation_response

  """
  delete single row from the table: "users_read_articles"
  """
  delete_users_read_articles_by_pk(article_id: uuid!, user_id: uuid!): users_read_articles

  """
  delete data from the table: "users_statuses"
  """
  delete_users_statuses(
    """filter the rows which have to be deleted"""
    where: users_statuses_bool_exp!
  ): users_statuses_mutation_response

  """
  delete single row from the table: "users_statuses"
  """
  delete_users_statuses_by_pk(id: uuid!): users_statuses

  """
  insert data into the table: "access"
  """
  insert_access(
    """the rows to be inserted"""
    objects: [access_insert_input!]!

    """on conflict condition"""
    on_conflict: access_on_conflict
  ): access_mutation_response

  """
  insert a single row into the table: "access"
  """
  insert_access_one(
    """the row to be inserted"""
    object: access_insert_input!

    """on conflict condition"""
    on_conflict: access_on_conflict
  ): access

  """
  insert data into the table: "article_type"
  """
  insert_article_type(
    """the rows to be inserted"""
    objects: [article_type_insert_input!]!

    """on conflict condition"""
    on_conflict: article_type_on_conflict
  ): article_type_mutation_response

  """
  insert a single row into the table: "article_type"
  """
  insert_article_type_one(
    """the row to be inserted"""
    object: article_type_insert_input!

    """on conflict condition"""
    on_conflict: article_type_on_conflict
  ): article_type

  """
  insert data into the table: "articles"
  """
  insert_articles(
    """the rows to be inserted"""
    objects: [articles_insert_input!]!

    """on conflict condition"""
    on_conflict: articles_on_conflict
  ): articles_mutation_response

  """
  insert a single row into the table: "articles"
  """
  insert_articles_one(
    """the row to be inserted"""
    object: articles_insert_input!

    """on conflict condition"""
    on_conflict: articles_on_conflict
  ): articles

  """
  insert data into the table: "articles_tags"
  """
  insert_articles_tags(
    """the rows to be inserted"""
    objects: [articles_tags_insert_input!]!

    """on conflict condition"""
    on_conflict: articles_tags_on_conflict
  ): articles_tags_mutation_response

  """
  insert a single row into the table: "articles_tags"
  """
  insert_articles_tags_one(
    """the row to be inserted"""
    object: articles_tags_insert_input!

    """on conflict condition"""
    on_conflict: articles_tags_on_conflict
  ): articles_tags

  """
  insert data into the table: "auth.account_providers"
  """
  insert_auth_account_providers(
    """the rows to be inserted"""
    objects: [auth_account_providers_insert_input!]!

    """on conflict condition"""
    on_conflict: auth_account_providers_on_conflict
  ): auth_account_providers_mutation_response

  """
  insert a single row into the table: "auth.account_providers"
  """
  insert_auth_account_providers_one(
    """the row to be inserted"""
    object: auth_account_providers_insert_input!

    """on conflict condition"""
    on_conflict: auth_account_providers_on_conflict
  ): auth_account_providers

  """
  insert data into the table: "auth.account_roles"
  """
  insert_auth_account_roles(
    """the rows to be inserted"""
    objects: [auth_account_roles_insert_input!]!

    """on conflict condition"""
    on_conflict: auth_account_roles_on_conflict
  ): auth_account_roles_mutation_response

  """
  insert a single row into the table: "auth.account_roles"
  """
  insert_auth_account_roles_one(
    """the row to be inserted"""
    object: auth_account_roles_insert_input!

    """on conflict condition"""
    on_conflict: auth_account_roles_on_conflict
  ): auth_account_roles

  """
  insert data into the table: "auth.accounts"
  """
  insert_auth_accounts(
    """the rows to be inserted"""
    objects: [auth_accounts_insert_input!]!

    """on conflict condition"""
    on_conflict: auth_accounts_on_conflict
  ): auth_accounts_mutation_response

  """
  insert a single row into the table: "auth.accounts"
  """
  insert_auth_accounts_one(
    """the row to be inserted"""
    object: auth_accounts_insert_input!

    """on conflict condition"""
    on_conflict: auth_accounts_on_conflict
  ): auth_accounts

  """
  insert data into the table: "auth.providers"
  """
  insert_auth_providers(
    """the rows to be inserted"""
    objects: [auth_providers_insert_input!]!

    """on conflict condition"""
    on_conflict: auth_providers_on_conflict
  ): auth_providers_mutation_response

  """
  insert a single row into the table: "auth.providers"
  """
  insert_auth_providers_one(
    """the row to be inserted"""
    object: auth_providers_insert_input!

    """on conflict condition"""
    on_conflict: auth_providers_on_conflict
  ): auth_providers

  """
  insert data into the table: "auth.refresh_tokens"
  """
  insert_auth_refresh_tokens(
    """the rows to be inserted"""
    objects: [auth_refresh_tokens_insert_input!]!

    """on conflict condition"""
    on_conflict: auth_refresh_tokens_on_conflict
  ): auth_refresh_tokens_mutation_response

  """
  insert a single row into the table: "auth.refresh_tokens"
  """
  insert_auth_refresh_tokens_one(
    """the row to be inserted"""
    object: auth_refresh_tokens_insert_input!

    """on conflict condition"""
    on_conflict: auth_refresh_tokens_on_conflict
  ): auth_refresh_tokens

  """
  insert data into the table: "auth.roles"
  """
  insert_auth_roles(
    """the rows to be inserted"""
    objects: [auth_roles_insert_input!]!

    """on conflict condition"""
    on_conflict: auth_roles_on_conflict
  ): auth_roles_mutation_response

  """
  insert a single row into the table: "auth.roles"
  """
  insert_auth_roles_one(
    """the row to be inserted"""
    object: auth_roles_insert_input!

    """on conflict condition"""
    on_conflict: auth_roles_on_conflict
  ): auth_roles

  """
  insert data into the table: "bases"
  """
  insert_bases(
    """the rows to be inserted"""
    objects: [bases_insert_input!]!

    """on conflict condition"""
    on_conflict: bases_on_conflict
  ): bases_mutation_response

  """
  insert a single row into the table: "bases"
  """
  insert_bases_one(
    """the row to be inserted"""
    object: bases_insert_input!

    """on conflict condition"""
    on_conflict: bases_on_conflict
  ): bases

  """
  insert data into the table: "categories_of_articles"
  """
  insert_categories_of_articles(
    """the rows to be inserted"""
    objects: [categories_of_articles_insert_input!]!

    """on conflict condition"""
    on_conflict: categories_of_articles_on_conflict
  ): categories_of_articles_mutation_response

  """
  insert a single row into the table: "categories_of_articles"
  """
  insert_categories_of_articles_one(
    """the row to be inserted"""
    object: categories_of_articles_insert_input!

    """on conflict condition"""
    on_conflict: categories_of_articles_on_conflict
  ): categories_of_articles

  """
  insert data into the table: "comments"
  """
  insert_comments(
    """the rows to be inserted"""
    objects: [comments_insert_input!]!

    """on conflict condition"""
    on_conflict: comments_on_conflict
  ): comments_mutation_response

  """
  insert a single row into the table: "comments"
  """
  insert_comments_one(
    """the row to be inserted"""
    object: comments_insert_input!

    """on conflict condition"""
    on_conflict: comments_on_conflict
  ): comments

  """
  insert data into the table: "default_categories_of_articles"
  """
  insert_default_categories_of_articles(
    """the rows to be inserted"""
    objects: [default_categories_of_articles_insert_input!]!

    """on conflict condition"""
    on_conflict: default_categories_of_articles_on_conflict
  ): default_categories_of_articles_mutation_response

  """
  insert a single row into the table: "default_categories_of_articles"
  """
  insert_default_categories_of_articles_one(
    """the row to be inserted"""
    object: default_categories_of_articles_insert_input!

    """on conflict condition"""
    on_conflict: default_categories_of_articles_on_conflict
  ): default_categories_of_articles

  """
  insert data into the table: "default_departments"
  """
  insert_default_departments(
    """the rows to be inserted"""
    objects: [default_departments_insert_input!]!

    """on conflict condition"""
    on_conflict: default_departments_on_conflict
  ): default_departments_mutation_response

  """
  insert a single row into the table: "default_departments"
  """
  insert_default_departments_one(
    """the row to be inserted"""
    object: default_departments_insert_input!

    """on conflict condition"""
    on_conflict: default_departments_on_conflict
  ): default_departments

  """
  insert data into the table: "default_positions"
  """
  insert_default_positions(
    """the rows to be inserted"""
    objects: [default_positions_insert_input!]!

    """on conflict condition"""
    on_conflict: default_positions_on_conflict
  ): default_positions_mutation_response

  """
  insert a single row into the table: "default_positions"
  """
  insert_default_positions_one(
    """the row to be inserted"""
    object: default_positions_insert_input!

    """on conflict condition"""
    on_conflict: default_positions_on_conflict
  ): default_positions

  """
  insert data into the table: "default_statuses"
  """
  insert_default_statuses(
    """the rows to be inserted"""
    objects: [default_statuses_insert_input!]!

    """on conflict condition"""
    on_conflict: default_statuses_on_conflict
  ): default_statuses_mutation_response

  """
  insert a single row into the table: "default_statuses"
  """
  insert_default_statuses_one(
    """the row to be inserted"""
    object: default_statuses_insert_input!

    """on conflict condition"""
    on_conflict: default_statuses_on_conflict
  ): default_statuses

  """
  insert data into the table: "departments"
  """
  insert_departments(
    """the rows to be inserted"""
    objects: [departments_insert_input!]!

    """on conflict condition"""
    on_conflict: departments_on_conflict
  ): departments_mutation_response

  """
  insert a single row into the table: "departments"
  """
  insert_departments_one(
    """the row to be inserted"""
    object: departments_insert_input!

    """on conflict condition"""
    on_conflict: departments_on_conflict
  ): departments

  """
  insert data into the table: "favorites"
  """
  insert_favorites(
    """the rows to be inserted"""
    objects: [favorites_insert_input!]!

    """on conflict condition"""
    on_conflict: favorites_on_conflict
  ): favorites_mutation_response

  """
  insert a single row into the table: "favorites"
  """
  insert_favorites_one(
    """the row to be inserted"""
    object: favorites_insert_input!

    """on conflict condition"""
    on_conflict: favorites_on_conflict
  ): favorites

  """
  insert data into the table: "invites"
  """
  insert_invites(
    """the rows to be inserted"""
    objects: [invites_insert_input!]!

    """on conflict condition"""
    on_conflict: invites_on_conflict
  ): invites_mutation_response

  """
  insert a single row into the table: "invites"
  """
  insert_invites_one(
    """the row to be inserted"""
    object: invites_insert_input!

    """on conflict condition"""
    on_conflict: invites_on_conflict
  ): invites

  """
  insert data into the table: "permission"
  """
  insert_permission(
    """the rows to be inserted"""
    objects: [permission_insert_input!]!

    """on conflict condition"""
    on_conflict: permission_on_conflict
  ): permission_mutation_response

  """
  insert a single row into the table: "permission"
  """
  insert_permission_one(
    """the row to be inserted"""
    object: permission_insert_input!

    """on conflict condition"""
    on_conflict: permission_on_conflict
  ): permission

  """
  insert data into the table: "positions"
  """
  insert_positions(
    """the rows to be inserted"""
    objects: [positions_insert_input!]!

    """on conflict condition"""
    on_conflict: positions_on_conflict
  ): positions_mutation_response

  """
  insert a single row into the table: "positions"
  """
  insert_positions_one(
    """the row to be inserted"""
    object: positions_insert_input!

    """on conflict condition"""
    on_conflict: positions_on_conflict
  ): positions

  """
  insert data into the table: "statuses"
  """
  insert_statuses(
    """the rows to be inserted"""
    objects: [statuses_insert_input!]!

    """on conflict condition"""
    on_conflict: statuses_on_conflict
  ): statuses_mutation_response

  """
  insert a single row into the table: "statuses"
  """
  insert_statuses_one(
    """the row to be inserted"""
    object: statuses_insert_input!

    """on conflict condition"""
    on_conflict: statuses_on_conflict
  ): statuses

  """
  insert data into the table: "tags"
  """
  insert_tags(
    """the rows to be inserted"""
    objects: [tags_insert_input!]!

    """on conflict condition"""
    on_conflict: tags_on_conflict
  ): tags_mutation_response

  """
  insert a single row into the table: "tags"
  """
  insert_tags_one(
    """the row to be inserted"""
    object: tags_insert_input!

    """on conflict condition"""
    on_conflict: tags_on_conflict
  ): tags

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert data into the table: "users_departments"
  """
  insert_users_departments(
    """the rows to be inserted"""
    objects: [users_departments_insert_input!]!

    """on conflict condition"""
    on_conflict: users_departments_on_conflict
  ): users_departments_mutation_response

  """
  insert a single row into the table: "users_departments"
  """
  insert_users_departments_one(
    """the row to be inserted"""
    object: users_departments_insert_input!

    """on conflict condition"""
    on_conflict: users_departments_on_conflict
  ): users_departments

  """
  insert data into the table: "users_in_bases"
  """
  insert_users_in_bases(
    """the rows to be inserted"""
    objects: [users_in_bases_insert_input!]!

    """on conflict condition"""
    on_conflict: users_in_bases_on_conflict
  ): users_in_bases_mutation_response

  """
  insert a single row into the table: "users_in_bases"
  """
  insert_users_in_bases_one(
    """the row to be inserted"""
    object: users_in_bases_insert_input!

    """on conflict condition"""
    on_conflict: users_in_bases_on_conflict
  ): users_in_bases

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users

  """
  insert data into the table: "users_permissions"
  """
  insert_users_permissions(
    """the rows to be inserted"""
    objects: [users_permissions_insert_input!]!

    """on conflict condition"""
    on_conflict: users_permissions_on_conflict
  ): users_permissions_mutation_response

  """
  insert a single row into the table: "users_permissions"
  """
  insert_users_permissions_one(
    """the row to be inserted"""
    object: users_permissions_insert_input!

    """on conflict condition"""
    on_conflict: users_permissions_on_conflict
  ): users_permissions

  """
  insert data into the table: "users_positions"
  """
  insert_users_positions(
    """the rows to be inserted"""
    objects: [users_positions_insert_input!]!

    """on conflict condition"""
    on_conflict: users_positions_on_conflict
  ): users_positions_mutation_response

  """
  insert a single row into the table: "users_positions"
  """
  insert_users_positions_one(
    """the row to be inserted"""
    object: users_positions_insert_input!

    """on conflict condition"""
    on_conflict: users_positions_on_conflict
  ): users_positions

  """
  insert data into the table: "users_read_articles"
  """
  insert_users_read_articles(
    """the rows to be inserted"""
    objects: [users_read_articles_insert_input!]!

    """on conflict condition"""
    on_conflict: users_read_articles_on_conflict
  ): users_read_articles_mutation_response

  """
  insert a single row into the table: "users_read_articles"
  """
  insert_users_read_articles_one(
    """the row to be inserted"""
    object: users_read_articles_insert_input!

    """on conflict condition"""
    on_conflict: users_read_articles_on_conflict
  ): users_read_articles

  """
  insert data into the table: "users_statuses"
  """
  insert_users_statuses(
    """the rows to be inserted"""
    objects: [users_statuses_insert_input!]!

    """on conflict condition"""
    on_conflict: users_statuses_on_conflict
  ): users_statuses_mutation_response

  """
  insert a single row into the table: "users_statuses"
  """
  insert_users_statuses_one(
    """the row to be inserted"""
    object: users_statuses_insert_input!

    """on conflict condition"""
    on_conflict: users_statuses_on_conflict
  ): users_statuses

  """
  update data of the table: "access"
  """
  update_access(
    """sets the columns of the filtered rows to the given values"""
    _set: access_set_input

    """filter the rows which have to be updated"""
    where: access_bool_exp!
  ): access_mutation_response

  """
  update single row of the table: "access"
  """
  update_access_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: access_set_input
    pk_columns: access_pk_columns_input!
  ): access

  """
  update data of the table: "article_type"
  """
  update_article_type(
    """sets the columns of the filtered rows to the given values"""
    _set: article_type_set_input

    """filter the rows which have to be updated"""
    where: article_type_bool_exp!
  ): article_type_mutation_response

  """
  update single row of the table: "article_type"
  """
  update_article_type_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: article_type_set_input
    pk_columns: article_type_pk_columns_input!
  ): article_type

  """
  update data of the table: "articles"
  """
  update_articles(
    """increments the integer columns with given value of the filtered values"""
    _inc: articles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: articles_set_input

    """filter the rows which have to be updated"""
    where: articles_bool_exp!
  ): articles_mutation_response

  """
  update single row of the table: "articles"
  """
  update_articles_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: articles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: articles_set_input
    pk_columns: articles_pk_columns_input!
  ): articles

  """
  update data of the table: "articles_tags"
  """
  update_articles_tags(
    """sets the columns of the filtered rows to the given values"""
    _set: articles_tags_set_input

    """filter the rows which have to be updated"""
    where: articles_tags_bool_exp!
  ): articles_tags_mutation_response

  """
  update single row of the table: "articles_tags"
  """
  update_articles_tags_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: articles_tags_set_input
    pk_columns: articles_tags_pk_columns_input!
  ): articles_tags

  """
  update data of the table: "auth.account_providers"
  """
  update_auth_account_providers(
    """sets the columns of the filtered rows to the given values"""
    _set: auth_account_providers_set_input

    """filter the rows which have to be updated"""
    where: auth_account_providers_bool_exp!
  ): auth_account_providers_mutation_response

  """
  update single row of the table: "auth.account_providers"
  """
  update_auth_account_providers_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: auth_account_providers_set_input
    pk_columns: auth_account_providers_pk_columns_input!
  ): auth_account_providers

  """
  update data of the table: "auth.account_roles"
  """
  update_auth_account_roles(
    """sets the columns of the filtered rows to the given values"""
    _set: auth_account_roles_set_input

    """filter the rows which have to be updated"""
    where: auth_account_roles_bool_exp!
  ): auth_account_roles_mutation_response

  """
  update single row of the table: "auth.account_roles"
  """
  update_auth_account_roles_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: auth_account_roles_set_input
    pk_columns: auth_account_roles_pk_columns_input!
  ): auth_account_roles

  """
  update data of the table: "auth.accounts"
  """
  update_auth_accounts(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: auth_accounts_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: auth_accounts_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: auth_accounts_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: auth_accounts_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: auth_accounts_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: auth_accounts_set_input

    """filter the rows which have to be updated"""
    where: auth_accounts_bool_exp!
  ): auth_accounts_mutation_response

  """
  update single row of the table: "auth.accounts"
  """
  update_auth_accounts_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: auth_accounts_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: auth_accounts_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _delete_elem: auth_accounts_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: auth_accounts_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: auth_accounts_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: auth_accounts_set_input
    pk_columns: auth_accounts_pk_columns_input!
  ): auth_accounts

  """
  update data of the table: "auth.providers"
  """
  update_auth_providers(
    """sets the columns of the filtered rows to the given values"""
    _set: auth_providers_set_input

    """filter the rows which have to be updated"""
    where: auth_providers_bool_exp!
  ): auth_providers_mutation_response

  """
  update single row of the table: "auth.providers"
  """
  update_auth_providers_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: auth_providers_set_input
    pk_columns: auth_providers_pk_columns_input!
  ): auth_providers

  """
  update data of the table: "auth.refresh_tokens"
  """
  update_auth_refresh_tokens(
    """sets the columns of the filtered rows to the given values"""
    _set: auth_refresh_tokens_set_input

    """filter the rows which have to be updated"""
    where: auth_refresh_tokens_bool_exp!
  ): auth_refresh_tokens_mutation_response

  """
  update single row of the table: "auth.refresh_tokens"
  """
  update_auth_refresh_tokens_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: auth_refresh_tokens_set_input
    pk_columns: auth_refresh_tokens_pk_columns_input!
  ): auth_refresh_tokens

  """
  update data of the table: "auth.roles"
  """
  update_auth_roles(
    """sets the columns of the filtered rows to the given values"""
    _set: auth_roles_set_input

    """filter the rows which have to be updated"""
    where: auth_roles_bool_exp!
  ): auth_roles_mutation_response

  """
  update single row of the table: "auth.roles"
  """
  update_auth_roles_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: auth_roles_set_input
    pk_columns: auth_roles_pk_columns_input!
  ): auth_roles

  """
  update data of the table: "bases"
  """
  update_bases(
    """sets the columns of the filtered rows to the given values"""
    _set: bases_set_input

    """filter the rows which have to be updated"""
    where: bases_bool_exp!
  ): bases_mutation_response

  """
  update single row of the table: "bases"
  """
  update_bases_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: bases_set_input
    pk_columns: bases_pk_columns_input!
  ): bases

  """
  update data of the table: "categories_of_articles"
  """
  update_categories_of_articles(
    """increments the integer columns with given value of the filtered values"""
    _inc: categories_of_articles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: categories_of_articles_set_input

    """filter the rows which have to be updated"""
    where: categories_of_articles_bool_exp!
  ): categories_of_articles_mutation_response

  """
  update single row of the table: "categories_of_articles"
  """
  update_categories_of_articles_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: categories_of_articles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: categories_of_articles_set_input
    pk_columns: categories_of_articles_pk_columns_input!
  ): categories_of_articles

  """
  update data of the table: "comments"
  """
  update_comments(
    """increments the integer columns with given value of the filtered values"""
    _inc: comments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: comments_set_input

    """filter the rows which have to be updated"""
    where: comments_bool_exp!
  ): comments_mutation_response

  """
  update single row of the table: "comments"
  """
  update_comments_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: comments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: comments_set_input
    pk_columns: comments_pk_columns_input!
  ): comments

  """
  update data of the table: "default_categories_of_articles"
  """
  update_default_categories_of_articles(
    """increments the integer columns with given value of the filtered values"""
    _inc: default_categories_of_articles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: default_categories_of_articles_set_input

    """filter the rows which have to be updated"""
    where: default_categories_of_articles_bool_exp!
  ): default_categories_of_articles_mutation_response

  """
  update single row of the table: "default_categories_of_articles"
  """
  update_default_categories_of_articles_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: default_categories_of_articles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: default_categories_of_articles_set_input
    pk_columns: default_categories_of_articles_pk_columns_input!
  ): default_categories_of_articles

  """
  update data of the table: "default_departments"
  """
  update_default_departments(
    """increments the integer columns with given value of the filtered values"""
    _inc: default_departments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: default_departments_set_input

    """filter the rows which have to be updated"""
    where: default_departments_bool_exp!
  ): default_departments_mutation_response

  """
  update single row of the table: "default_departments"
  """
  update_default_departments_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: default_departments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: default_departments_set_input
    pk_columns: default_departments_pk_columns_input!
  ): default_departments

  """
  update data of the table: "default_positions"
  """
  update_default_positions(
    """increments the integer columns with given value of the filtered values"""
    _inc: default_positions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: default_positions_set_input

    """filter the rows which have to be updated"""
    where: default_positions_bool_exp!
  ): default_positions_mutation_response

  """
  update single row of the table: "default_positions"
  """
  update_default_positions_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: default_positions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: default_positions_set_input
    pk_columns: default_positions_pk_columns_input!
  ): default_positions

  """
  update data of the table: "default_statuses"
  """
  update_default_statuses(
    """increments the integer columns with given value of the filtered values"""
    _inc: default_statuses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: default_statuses_set_input

    """filter the rows which have to be updated"""
    where: default_statuses_bool_exp!
  ): default_statuses_mutation_response

  """
  update single row of the table: "default_statuses"
  """
  update_default_statuses_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: default_statuses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: default_statuses_set_input
    pk_columns: default_statuses_pk_columns_input!
  ): default_statuses

  """
  update data of the table: "departments"
  """
  update_departments(
    """sets the columns of the filtered rows to the given values"""
    _set: departments_set_input

    """filter the rows which have to be updated"""
    where: departments_bool_exp!
  ): departments_mutation_response

  """
  update single row of the table: "departments"
  """
  update_departments_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: departments_set_input
    pk_columns: departments_pk_columns_input!
  ): departments

  """
  update data of the table: "favorites"
  """
  update_favorites(
    """sets the columns of the filtered rows to the given values"""
    _set: favorites_set_input

    """filter the rows which have to be updated"""
    where: favorites_bool_exp!
  ): favorites_mutation_response

  """
  update single row of the table: "favorites"
  """
  update_favorites_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: favorites_set_input
    pk_columns: favorites_pk_columns_input!
  ): favorites

  """
  update data of the table: "invites"
  """
  update_invites(
    """sets the columns of the filtered rows to the given values"""
    _set: invites_set_input

    """filter the rows which have to be updated"""
    where: invites_bool_exp!
  ): invites_mutation_response

  """
  update single row of the table: "invites"
  """
  update_invites_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: invites_set_input
    pk_columns: invites_pk_columns_input!
  ): invites

  """
  update data of the table: "permission"
  """
  update_permission(
    """sets the columns of the filtered rows to the given values"""
    _set: permission_set_input

    """filter the rows which have to be updated"""
    where: permission_bool_exp!
  ): permission_mutation_response

  """
  update single row of the table: "permission"
  """
  update_permission_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: permission_set_input
    pk_columns: permission_pk_columns_input!
  ): permission

  """
  update data of the table: "positions"
  """
  update_positions(
    """sets the columns of the filtered rows to the given values"""
    _set: positions_set_input

    """filter the rows which have to be updated"""
    where: positions_bool_exp!
  ): positions_mutation_response

  """
  update single row of the table: "positions"
  """
  update_positions_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: positions_set_input
    pk_columns: positions_pk_columns_input!
  ): positions

  """
  update data of the table: "statuses"
  """
  update_statuses(
    """sets the columns of the filtered rows to the given values"""
    _set: statuses_set_input

    """filter the rows which have to be updated"""
    where: statuses_bool_exp!
  ): statuses_mutation_response

  """
  update single row of the table: "statuses"
  """
  update_statuses_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: statuses_set_input
    pk_columns: statuses_pk_columns_input!
  ): statuses

  """
  update data of the table: "tags"
  """
  update_tags(
    """sets the columns of the filtered rows to the given values"""
    _set: tags_set_input

    """filter the rows which have to be updated"""
    where: tags_bool_exp!
  ): tags_mutation_response

  """
  update single row of the table: "tags"
  """
  update_tags_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: tags_set_input
    pk_columns: tags_pk_columns_input!
  ): tags

  """
  update data of the table: "users"
  """
  update_users(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update data of the table: "users_departments"
  """
  update_users_departments(
    """sets the columns of the filtered rows to the given values"""
    _set: users_departments_set_input

    """filter the rows which have to be updated"""
    where: users_departments_bool_exp!
  ): users_departments_mutation_response

  """
  update single row of the table: "users_departments"
  """
  update_users_departments_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_departments_set_input
    pk_columns: users_departments_pk_columns_input!
  ): users_departments

  """
  update data of the table: "users_in_bases"
  """
  update_users_in_bases(
    """sets the columns of the filtered rows to the given values"""
    _set: users_in_bases_set_input

    """filter the rows which have to be updated"""
    where: users_in_bases_bool_exp!
  ): users_in_bases_mutation_response

  """
  update single row of the table: "users_in_bases"
  """
  update_users_in_bases_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_in_bases_set_input
    pk_columns: users_in_bases_pk_columns_input!
  ): users_in_bases

  """
  update data of the table: "users_permissions"
  """
  update_users_permissions(
    """sets the columns of the filtered rows to the given values"""
    _set: users_permissions_set_input

    """filter the rows which have to be updated"""
    where: users_permissions_bool_exp!
  ): users_permissions_mutation_response

  """
  update single row of the table: "users_permissions"
  """
  update_users_permissions_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_permissions_set_input
    pk_columns: users_permissions_pk_columns_input!
  ): users_permissions

  """
  update data of the table: "users_positions"
  """
  update_users_positions(
    """sets the columns of the filtered rows to the given values"""
    _set: users_positions_set_input

    """filter the rows which have to be updated"""
    where: users_positions_bool_exp!
  ): users_positions_mutation_response

  """
  update single row of the table: "users_positions"
  """
  update_users_positions_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_positions_set_input
    pk_columns: users_positions_pk_columns_input!
  ): users_positions

  """
  update data of the table: "users_read_articles"
  """
  update_users_read_articles(
    """sets the columns of the filtered rows to the given values"""
    _set: users_read_articles_set_input

    """filter the rows which have to be updated"""
    where: users_read_articles_bool_exp!
  ): users_read_articles_mutation_response

  """
  update single row of the table: "users_read_articles"
  """
  update_users_read_articles_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_read_articles_set_input
    pk_columns: users_read_articles_pk_columns_input!
  ): users_read_articles

  """
  update data of the table: "users_statuses"
  """
  update_users_statuses(
    """sets the columns of the filtered rows to the given values"""
    _set: users_statuses_set_input

    """filter the rows which have to be updated"""
    where: users_statuses_bool_exp!
  ): users_statuses_mutation_response

  """
  update single row of the table: "users_statuses"
  """
  update_users_statuses_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_statuses_set_input
    pk_columns: users_statuses_pk_columns_input!
  ): users_statuses
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
Права доступа


columns and relationships of "permission"

"""
type permission {
  id: String!

  """An array relationship"""
  invites(
    """distinct select on columns"""
    distinct_on: [invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [invites_order_by!]

    """filter the rows returned"""
    where: invites_bool_exp
  ): [invites!]!

  """An aggregated array relationship"""
  invites_aggregate(
    """distinct select on columns"""
    distinct_on: [invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [invites_order_by!]

    """filter the rows returned"""
    where: invites_bool_exp
  ): invites_aggregate!
  name: String!
}

"""
aggregated selection of "permission"
"""
type permission_aggregate {
  aggregate: permission_aggregate_fields
  nodes: [permission!]!
}

"""
aggregate fields of "permission"
"""
type permission_aggregate_fields {
  count(columns: [permission_select_column!], distinct: Boolean): Int
  max: permission_max_fields
  min: permission_min_fields
}

"""
order by aggregate values of table "permission"
"""
input permission_aggregate_order_by {
  count: order_by
  max: permission_max_order_by
  min: permission_min_order_by
}

"""
input type for inserting array relation for remote table "permission"
"""
input permission_arr_rel_insert_input {
  data: [permission_insert_input!]!
  on_conflict: permission_on_conflict
}

"""
Boolean expression to filter rows from the table "permission". All fields are combined with a logical 'AND'.
"""
input permission_bool_exp {
  _and: [permission_bool_exp]
  _not: permission_bool_exp
  _or: [permission_bool_exp]
  id: String_comparison_exp
  invites: invites_bool_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "permission"
"""
enum permission_constraint {
  """unique or primary key constraint"""
  permissions_pkey
}

enum permission_enum {
  """Администратор"""
  ADMIN

  """Автор"""
  AUTHOR

  """Модератор"""
  MODERATOR

  """Супер администратор"""
  SUPER_ADMIN

  """Пользователь"""
  USER

  """Без доступа"""
  WITHOUT_ACCESS
}

"""
expression to compare columns of type permission_enum. All fields are combined with logical 'AND'.
"""
input permission_enum_comparison_exp {
  _eq: permission_enum
  _in: [permission_enum!]
  _is_null: Boolean
  _neq: permission_enum
  _nin: [permission_enum!]
}

"""
input type for inserting data into table "permission"
"""
input permission_insert_input {
  id: String
  invites: invites_arr_rel_insert_input
  name: String
}

"""aggregate max on columns"""
type permission_max_fields {
  id: String
  name: String
}

"""
order by max() on columns of table "permission"
"""
input permission_max_order_by {
  id: order_by
  name: order_by
}

"""aggregate min on columns"""
type permission_min_fields {
  id: String
  name: String
}

"""
order by min() on columns of table "permission"
"""
input permission_min_order_by {
  id: order_by
  name: order_by
}

"""
response of any mutation on the table "permission"
"""
type permission_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [permission!]!
}

"""
input type for inserting object relation for remote table "permission"
"""
input permission_obj_rel_insert_input {
  data: permission_insert_input!
  on_conflict: permission_on_conflict
}

"""
on conflict condition type for table "permission"
"""
input permission_on_conflict {
  constraint: permission_constraint!
  update_columns: [permission_update_column!]!
  where: permission_bool_exp
}

"""
ordering options when selecting data from "permission"
"""
input permission_order_by {
  id: order_by
  invites_aggregate: invites_aggregate_order_by
  name: order_by
}

"""
primary key columns input for table: "permission"
"""
input permission_pk_columns_input {
  id: String!
}

"""
select columns of table "permission"
"""
enum permission_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "permission"
"""
input permission_set_input {
  id: String
  name: String
}

"""
update columns of table "permission"
"""
enum permission_update_column {
  """column name"""
  id

  """column name"""
  name
}

"""
Должности


columns and relationships of "positions"

"""
type positions {
  """An object relationship"""
  base: bases!
  base_id: uuid!
  created_at: timestamptz!
  id: uuid!
  name: String!
  updated_at: timestamptz!

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [users_positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_positions_order_by!]

    """filter the rows returned"""
    where: users_positions_bool_exp
  ): [users_positions!]!

  """An aggregated array relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_positions_order_by!]

    """filter the rows returned"""
    where: users_positions_bool_exp
  ): users_positions_aggregate!
}

"""
aggregated selection of "positions"
"""
type positions_aggregate {
  aggregate: positions_aggregate_fields
  nodes: [positions!]!
}

"""
aggregate fields of "positions"
"""
type positions_aggregate_fields {
  count(columns: [positions_select_column!], distinct: Boolean): Int
  max: positions_max_fields
  min: positions_min_fields
}

"""
order by aggregate values of table "positions"
"""
input positions_aggregate_order_by {
  count: order_by
  max: positions_max_order_by
  min: positions_min_order_by
}

"""
input type for inserting array relation for remote table "positions"
"""
input positions_arr_rel_insert_input {
  data: [positions_insert_input!]!
  on_conflict: positions_on_conflict
}

"""
Boolean expression to filter rows from the table "positions". All fields are combined with a logical 'AND'.
"""
input positions_bool_exp {
  _and: [positions_bool_exp]
  _not: positions_bool_exp
  _or: [positions_bool_exp]
  base: bases_bool_exp
  base_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  users: users_positions_bool_exp
}

"""
unique or primary key constraints on table "positions"
"""
enum positions_constraint {
  """unique or primary key constraint"""
  positions_base_id_name_key

  """unique or primary key constraint"""
  positions_pkey
}

"""
input type for inserting data into table "positions"
"""
input positions_insert_input {
  base: bases_obj_rel_insert_input
  base_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
  users: users_positions_arr_rel_insert_input
}

"""aggregate max on columns"""
type positions_max_fields {
  base_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "positions"
"""
input positions_max_order_by {
  base_id: order_by
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type positions_min_fields {
  base_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "positions"
"""
input positions_min_order_by {
  base_id: order_by
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "positions"
"""
type positions_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [positions!]!
}

"""
input type for inserting object relation for remote table "positions"
"""
input positions_obj_rel_insert_input {
  data: positions_insert_input!
  on_conflict: positions_on_conflict
}

"""
on conflict condition type for table "positions"
"""
input positions_on_conflict {
  constraint: positions_constraint!
  update_columns: [positions_update_column!]!
  where: positions_bool_exp
}

"""
ordering options when selecting data from "positions"
"""
input positions_order_by {
  base: bases_order_by
  base_id: order_by
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
  users_aggregate: users_positions_aggregate_order_by
}

"""
primary key columns input for table: "positions"
"""
input positions_pk_columns_input {
  id: uuid!
}

"""
select columns of table "positions"
"""
enum positions_select_column {
  """column name"""
  base_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "positions"
"""
input positions_set_input {
  base_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
update columns of table "positions"
"""
enum positions_update_column {
  """column name"""
  base_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

type Query {
  get_google_document_content(url: String!): StatusOutput!
}

"""query root"""
type query_root {
  """
  fetch data from the table: "access"
  """
  access(
    """distinct select on columns"""
    distinct_on: [access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [access_order_by!]

    """filter the rows returned"""
    where: access_bool_exp
  ): [access!]!

  """
  fetch aggregated fields from the table: "access"
  """
  access_aggregate(
    """distinct select on columns"""
    distinct_on: [access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [access_order_by!]

    """filter the rows returned"""
    where: access_bool_exp
  ): access_aggregate!

  """fetch data from the table: "access" using primary key columns"""
  access_by_pk(id: String!): access

  """
  fetch data from the table: "article_type"
  """
  article_type(
    """distinct select on columns"""
    distinct_on: [article_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_type_order_by!]

    """filter the rows returned"""
    where: article_type_bool_exp
  ): [article_type!]!

  """
  fetch aggregated fields from the table: "article_type"
  """
  article_type_aggregate(
    """distinct select on columns"""
    distinct_on: [article_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_type_order_by!]

    """filter the rows returned"""
    where: article_type_bool_exp
  ): article_type_aggregate!

  """fetch data from the table: "article_type" using primary key columns"""
  article_type_by_pk(type: String!): article_type

  """
  fetch data from the table: "articles"
  """
  articles(
    """distinct select on columns"""
    distinct_on: [articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_order_by!]

    """filter the rows returned"""
    where: articles_bool_exp
  ): [articles!]!

  """
  fetch aggregated fields from the table: "articles"
  """
  articles_aggregate(
    """distinct select on columns"""
    distinct_on: [articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_order_by!]

    """filter the rows returned"""
    where: articles_bool_exp
  ): articles_aggregate!

  """fetch data from the table: "articles" using primary key columns"""
  articles_by_pk(id: uuid!): articles

  """
  fetch data from the table: "articles_tags"
  """
  articles_tags(
    """distinct select on columns"""
    distinct_on: [articles_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_tags_order_by!]

    """filter the rows returned"""
    where: articles_tags_bool_exp
  ): [articles_tags!]!

  """
  fetch aggregated fields from the table: "articles_tags"
  """
  articles_tags_aggregate(
    """distinct select on columns"""
    distinct_on: [articles_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_tags_order_by!]

    """filter the rows returned"""
    where: articles_tags_bool_exp
  ): articles_tags_aggregate!

  """fetch data from the table: "articles_tags" using primary key columns"""
  articles_tags_by_pk(article_id: uuid!, tag: String!): articles_tags

  """
  fetch data from the table: "auth.account_providers"
  """
  auth_account_providers(
    """distinct select on columns"""
    distinct_on: [auth_account_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_providers_order_by!]

    """filter the rows returned"""
    where: auth_account_providers_bool_exp
  ): [auth_account_providers!]!

  """
  fetch aggregated fields from the table: "auth.account_providers"
  """
  auth_account_providers_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_account_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_providers_order_by!]

    """filter the rows returned"""
    where: auth_account_providers_bool_exp
  ): auth_account_providers_aggregate!

  """
  fetch data from the table: "auth.account_providers" using primary key columns
  """
  auth_account_providers_by_pk(id: uuid!): auth_account_providers

  """
  fetch data from the table: "auth.account_roles"
  """
  auth_account_roles(
    """distinct select on columns"""
    distinct_on: [auth_account_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_roles_order_by!]

    """filter the rows returned"""
    where: auth_account_roles_bool_exp
  ): [auth_account_roles!]!

  """
  fetch aggregated fields from the table: "auth.account_roles"
  """
  auth_account_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_account_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_roles_order_by!]

    """filter the rows returned"""
    where: auth_account_roles_bool_exp
  ): auth_account_roles_aggregate!

  """
  fetch data from the table: "auth.account_roles" using primary key columns
  """
  auth_account_roles_by_pk(id: uuid!): auth_account_roles

  """
  fetch data from the table: "auth.accounts"
  """
  auth_accounts(
    """distinct select on columns"""
    distinct_on: [auth_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_accounts_order_by!]

    """filter the rows returned"""
    where: auth_accounts_bool_exp
  ): [auth_accounts!]!

  """
  fetch aggregated fields from the table: "auth.accounts"
  """
  auth_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_accounts_order_by!]

    """filter the rows returned"""
    where: auth_accounts_bool_exp
  ): auth_accounts_aggregate!

  """fetch data from the table: "auth.accounts" using primary key columns"""
  auth_accounts_by_pk(id: uuid!): auth_accounts

  """
  fetch data from the table: "auth.providers"
  """
  auth_providers(
    """distinct select on columns"""
    distinct_on: [auth_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_providers_order_by!]

    """filter the rows returned"""
    where: auth_providers_bool_exp
  ): [auth_providers!]!

  """
  fetch aggregated fields from the table: "auth.providers"
  """
  auth_providers_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_providers_order_by!]

    """filter the rows returned"""
    where: auth_providers_bool_exp
  ): auth_providers_aggregate!

  """fetch data from the table: "auth.providers" using primary key columns"""
  auth_providers_by_pk(provider: String!): auth_providers

  """
  fetch data from the table: "auth.refresh_tokens"
  """
  auth_refresh_tokens(
    """distinct select on columns"""
    distinct_on: [auth_refresh_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_refresh_tokens_order_by!]

    """filter the rows returned"""
    where: auth_refresh_tokens_bool_exp
  ): [auth_refresh_tokens!]!

  """
  fetch aggregated fields from the table: "auth.refresh_tokens"
  """
  auth_refresh_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_refresh_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_refresh_tokens_order_by!]

    """filter the rows returned"""
    where: auth_refresh_tokens_bool_exp
  ): auth_refresh_tokens_aggregate!

  """
  fetch data from the table: "auth.refresh_tokens" using primary key columns
  """
  auth_refresh_tokens_by_pk(refresh_token: uuid!): auth_refresh_tokens

  """
  fetch data from the table: "auth.roles"
  """
  auth_roles(
    """distinct select on columns"""
    distinct_on: [auth_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_roles_order_by!]

    """filter the rows returned"""
    where: auth_roles_bool_exp
  ): [auth_roles!]!

  """
  fetch aggregated fields from the table: "auth.roles"
  """
  auth_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_roles_order_by!]

    """filter the rows returned"""
    where: auth_roles_bool_exp
  ): auth_roles_aggregate!

  """fetch data from the table: "auth.roles" using primary key columns"""
  auth_roles_by_pk(role: String!): auth_roles

  """
  fetch data from the table: "bases"
  """
  bases(
    """distinct select on columns"""
    distinct_on: [bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bases_order_by!]

    """filter the rows returned"""
    where: bases_bool_exp
  ): [bases!]!

  """
  fetch aggregated fields from the table: "bases"
  """
  bases_aggregate(
    """distinct select on columns"""
    distinct_on: [bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bases_order_by!]

    """filter the rows returned"""
    where: bases_bool_exp
  ): bases_aggregate!

  """fetch data from the table: "bases" using primary key columns"""
  bases_by_pk(id: uuid!): bases

  """
  fetch data from the table: "categories_of_articles"
  """
  categories_of_articles(
    """distinct select on columns"""
    distinct_on: [categories_of_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_of_articles_order_by!]

    """filter the rows returned"""
    where: categories_of_articles_bool_exp
  ): [categories_of_articles!]!

  """
  fetch aggregated fields from the table: "categories_of_articles"
  """
  categories_of_articles_aggregate(
    """distinct select on columns"""
    distinct_on: [categories_of_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_of_articles_order_by!]

    """filter the rows returned"""
    where: categories_of_articles_bool_exp
  ): categories_of_articles_aggregate!

  """
  fetch data from the table: "categories_of_articles" using primary key columns
  """
  categories_of_articles_by_pk(id: uuid!): categories_of_articles

  """
  fetch data from the table: "comments"
  """
  comments(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): [comments!]!

  """
  fetch aggregated fields from the table: "comments"
  """
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): comments_aggregate!

  """fetch data from the table: "comments" using primary key columns"""
  comments_by_pk(id: uuid!): comments

  """
  fetch data from the table: "default_categories_of_articles"
  """
  default_categories_of_articles(
    """distinct select on columns"""
    distinct_on: [default_categories_of_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_categories_of_articles_order_by!]

    """filter the rows returned"""
    where: default_categories_of_articles_bool_exp
  ): [default_categories_of_articles!]!

  """
  fetch aggregated fields from the table: "default_categories_of_articles"
  """
  default_categories_of_articles_aggregate(
    """distinct select on columns"""
    distinct_on: [default_categories_of_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_categories_of_articles_order_by!]

    """filter the rows returned"""
    where: default_categories_of_articles_bool_exp
  ): default_categories_of_articles_aggregate!

  """
  fetch data from the table: "default_categories_of_articles" using primary key columns
  """
  default_categories_of_articles_by_pk(id: uuid!): default_categories_of_articles

  """
  fetch data from the table: "default_departments"
  """
  default_departments(
    """distinct select on columns"""
    distinct_on: [default_departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_departments_order_by!]

    """filter the rows returned"""
    where: default_departments_bool_exp
  ): [default_departments!]!

  """
  fetch aggregated fields from the table: "default_departments"
  """
  default_departments_aggregate(
    """distinct select on columns"""
    distinct_on: [default_departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_departments_order_by!]

    """filter the rows returned"""
    where: default_departments_bool_exp
  ): default_departments_aggregate!

  """
  fetch data from the table: "default_departments" using primary key columns
  """
  default_departments_by_pk(id: uuid!): default_departments

  """
  fetch data from the table: "default_positions"
  """
  default_positions(
    """distinct select on columns"""
    distinct_on: [default_positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_positions_order_by!]

    """filter the rows returned"""
    where: default_positions_bool_exp
  ): [default_positions!]!

  """
  fetch aggregated fields from the table: "default_positions"
  """
  default_positions_aggregate(
    """distinct select on columns"""
    distinct_on: [default_positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_positions_order_by!]

    """filter the rows returned"""
    where: default_positions_bool_exp
  ): default_positions_aggregate!

  """
  fetch data from the table: "default_positions" using primary key columns
  """
  default_positions_by_pk(id: uuid!): default_positions

  """
  fetch data from the table: "default_statuses"
  """
  default_statuses(
    """distinct select on columns"""
    distinct_on: [default_statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_statuses_order_by!]

    """filter the rows returned"""
    where: default_statuses_bool_exp
  ): [default_statuses!]!

  """
  fetch aggregated fields from the table: "default_statuses"
  """
  default_statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [default_statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_statuses_order_by!]

    """filter the rows returned"""
    where: default_statuses_bool_exp
  ): default_statuses_aggregate!

  """
  fetch data from the table: "default_statuses" using primary key columns
  """
  default_statuses_by_pk(id: uuid!): default_statuses

  """
  fetch data from the table: "departments"
  """
  departments(
    """distinct select on columns"""
    distinct_on: [departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [departments_order_by!]

    """filter the rows returned"""
    where: departments_bool_exp
  ): [departments!]!

  """
  fetch aggregated fields from the table: "departments"
  """
  departments_aggregate(
    """distinct select on columns"""
    distinct_on: [departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [departments_order_by!]

    """filter the rows returned"""
    where: departments_bool_exp
  ): departments_aggregate!

  """fetch data from the table: "departments" using primary key columns"""
  departments_by_pk(id: uuid!): departments

  """
  fetch data from the table: "favorites"
  """
  favorites(
    """distinct select on columns"""
    distinct_on: [favorites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [favorites_order_by!]

    """filter the rows returned"""
    where: favorites_bool_exp
  ): [favorites!]!

  """
  fetch aggregated fields from the table: "favorites"
  """
  favorites_aggregate(
    """distinct select on columns"""
    distinct_on: [favorites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [favorites_order_by!]

    """filter the rows returned"""
    where: favorites_bool_exp
  ): favorites_aggregate!

  """fetch data from the table: "favorites" using primary key columns"""
  favorites_by_pk(id: uuid!): favorites
  get_google_document_content(url: String!): StatusOutput!

  """
  fetch data from the table: "invites"
  """
  invites(
    """distinct select on columns"""
    distinct_on: [invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [invites_order_by!]

    """filter the rows returned"""
    where: invites_bool_exp
  ): [invites!]!

  """
  fetch aggregated fields from the table: "invites"
  """
  invites_aggregate(
    """distinct select on columns"""
    distinct_on: [invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [invites_order_by!]

    """filter the rows returned"""
    where: invites_bool_exp
  ): invites_aggregate!

  """fetch data from the table: "invites" using primary key columns"""
  invites_by_pk(id: uuid!): invites

  """
  fetch data from the table: "permission"
  """
  permission(
    """distinct select on columns"""
    distinct_on: [permission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [permission_order_by!]

    """filter the rows returned"""
    where: permission_bool_exp
  ): [permission!]!

  """
  fetch aggregated fields from the table: "permission"
  """
  permission_aggregate(
    """distinct select on columns"""
    distinct_on: [permission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [permission_order_by!]

    """filter the rows returned"""
    where: permission_bool_exp
  ): permission_aggregate!

  """fetch data from the table: "permission" using primary key columns"""
  permission_by_pk(id: String!): permission

  """
  fetch data from the table: "positions"
  """
  positions(
    """distinct select on columns"""
    distinct_on: [positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [positions_order_by!]

    """filter the rows returned"""
    where: positions_bool_exp
  ): [positions!]!

  """
  fetch aggregated fields from the table: "positions"
  """
  positions_aggregate(
    """distinct select on columns"""
    distinct_on: [positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [positions_order_by!]

    """filter the rows returned"""
    where: positions_bool_exp
  ): positions_aggregate!

  """fetch data from the table: "positions" using primary key columns"""
  positions_by_pk(id: uuid!): positions

  """
  fetch data from the table: "statuses"
  """
  statuses(
    """distinct select on columns"""
    distinct_on: [statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [statuses_order_by!]

    """filter the rows returned"""
    where: statuses_bool_exp
  ): [statuses!]!

  """
  fetch aggregated fields from the table: "statuses"
  """
  statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [statuses_order_by!]

    """filter the rows returned"""
    where: statuses_bool_exp
  ): statuses_aggregate!

  """fetch data from the table: "statuses" using primary key columns"""
  statuses_by_pk(id: uuid!): statuses

  """
  fetch data from the table: "tags"
  """
  tags(
    """distinct select on columns"""
    distinct_on: [tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tags_order_by!]

    """filter the rows returned"""
    where: tags_bool_exp
  ): [tags!]!

  """
  fetch aggregated fields from the table: "tags"
  """
  tags_aggregate(
    """distinct select on columns"""
    distinct_on: [tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tags_order_by!]

    """filter the rows returned"""
    where: tags_bool_exp
  ): tags_aggregate!

  """fetch data from the table: "tags" using primary key columns"""
  tags_by_pk(tag: String!): tags

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: uuid!): users

  """
  fetch data from the table: "users_departments"
  """
  users_departments(
    """distinct select on columns"""
    distinct_on: [users_departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_departments_order_by!]

    """filter the rows returned"""
    where: users_departments_bool_exp
  ): [users_departments!]!

  """
  fetch aggregated fields from the table: "users_departments"
  """
  users_departments_aggregate(
    """distinct select on columns"""
    distinct_on: [users_departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_departments_order_by!]

    """filter the rows returned"""
    where: users_departments_bool_exp
  ): users_departments_aggregate!

  """
  fetch data from the table: "users_departments" using primary key columns
  """
  users_departments_by_pk(id: uuid!): users_departments

  """
  fetch data from the table: "users_in_bases"
  """
  users_in_bases(
    """distinct select on columns"""
    distinct_on: [users_in_bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_in_bases_order_by!]

    """filter the rows returned"""
    where: users_in_bases_bool_exp
  ): [users_in_bases!]!

  """
  fetch aggregated fields from the table: "users_in_bases"
  """
  users_in_bases_aggregate(
    """distinct select on columns"""
    distinct_on: [users_in_bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_in_bases_order_by!]

    """filter the rows returned"""
    where: users_in_bases_bool_exp
  ): users_in_bases_aggregate!

  """fetch data from the table: "users_in_bases" using primary key columns"""
  users_in_bases_by_pk(base_id: uuid!, user_id: uuid!): users_in_bases

  """
  fetch data from the table: "users_permissions"
  """
  users_permissions(
    """distinct select on columns"""
    distinct_on: [users_permissions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_permissions_order_by!]

    """filter the rows returned"""
    where: users_permissions_bool_exp
  ): [users_permissions!]!

  """
  fetch aggregated fields from the table: "users_permissions"
  """
  users_permissions_aggregate(
    """distinct select on columns"""
    distinct_on: [users_permissions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_permissions_order_by!]

    """filter the rows returned"""
    where: users_permissions_bool_exp
  ): users_permissions_aggregate!

  """
  fetch data from the table: "users_permissions" using primary key columns
  """
  users_permissions_by_pk(id: uuid!): users_permissions

  """
  fetch data from the table: "users_positions"
  """
  users_positions(
    """distinct select on columns"""
    distinct_on: [users_positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_positions_order_by!]

    """filter the rows returned"""
    where: users_positions_bool_exp
  ): [users_positions!]!

  """
  fetch aggregated fields from the table: "users_positions"
  """
  users_positions_aggregate(
    """distinct select on columns"""
    distinct_on: [users_positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_positions_order_by!]

    """filter the rows returned"""
    where: users_positions_bool_exp
  ): users_positions_aggregate!

  """fetch data from the table: "users_positions" using primary key columns"""
  users_positions_by_pk(id: uuid!): users_positions

  """
  fetch data from the table: "users_read_articles"
  """
  users_read_articles(
    """distinct select on columns"""
    distinct_on: [users_read_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_read_articles_order_by!]

    """filter the rows returned"""
    where: users_read_articles_bool_exp
  ): [users_read_articles!]!

  """
  fetch aggregated fields from the table: "users_read_articles"
  """
  users_read_articles_aggregate(
    """distinct select on columns"""
    distinct_on: [users_read_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_read_articles_order_by!]

    """filter the rows returned"""
    where: users_read_articles_bool_exp
  ): users_read_articles_aggregate!

  """
  fetch data from the table: "users_read_articles" using primary key columns
  """
  users_read_articles_by_pk(article_id: uuid!, user_id: uuid!): users_read_articles

  """
  fetch data from the table: "users_statuses"
  """
  users_statuses(
    """distinct select on columns"""
    distinct_on: [users_statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_statuses_order_by!]

    """filter the rows returned"""
    where: users_statuses_bool_exp
  ): [users_statuses!]!

  """
  fetch aggregated fields from the table: "users_statuses"
  """
  users_statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [users_statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_statuses_order_by!]

    """filter the rows returned"""
    where: users_statuses_bool_exp
  ): users_statuses_aggregate!

  """fetch data from the table: "users_statuses" using primary key columns"""
  users_statuses_by_pk(id: uuid!): users_statuses
}

"""
Статусы


columns and relationships of "statuses"

"""
type statuses {
  """An object relationship"""
  base: bases!
  base_id: uuid!
  created_at: timestamptz!
  id: uuid!
  name: String!
  updated_at: timestamptz!

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [users_statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_statuses_order_by!]

    """filter the rows returned"""
    where: users_statuses_bool_exp
  ): [users_statuses!]!

  """An aggregated array relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_statuses_order_by!]

    """filter the rows returned"""
    where: users_statuses_bool_exp
  ): users_statuses_aggregate!
}

"""
aggregated selection of "statuses"
"""
type statuses_aggregate {
  aggregate: statuses_aggregate_fields
  nodes: [statuses!]!
}

"""
aggregate fields of "statuses"
"""
type statuses_aggregate_fields {
  count(columns: [statuses_select_column!], distinct: Boolean): Int
  max: statuses_max_fields
  min: statuses_min_fields
}

"""
order by aggregate values of table "statuses"
"""
input statuses_aggregate_order_by {
  count: order_by
  max: statuses_max_order_by
  min: statuses_min_order_by
}

"""
input type for inserting array relation for remote table "statuses"
"""
input statuses_arr_rel_insert_input {
  data: [statuses_insert_input!]!
  on_conflict: statuses_on_conflict
}

"""
Boolean expression to filter rows from the table "statuses". All fields are combined with a logical 'AND'.
"""
input statuses_bool_exp {
  _and: [statuses_bool_exp]
  _not: statuses_bool_exp
  _or: [statuses_bool_exp]
  base: bases_bool_exp
  base_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  users: users_statuses_bool_exp
}

"""
unique or primary key constraints on table "statuses"
"""
enum statuses_constraint {
  """unique or primary key constraint"""
  statuses_base_id_name_key

  """unique or primary key constraint"""
  statuses_pkey
}

"""
input type for inserting data into table "statuses"
"""
input statuses_insert_input {
  base: bases_obj_rel_insert_input
  base_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
  users: users_statuses_arr_rel_insert_input
}

"""aggregate max on columns"""
type statuses_max_fields {
  base_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "statuses"
"""
input statuses_max_order_by {
  base_id: order_by
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type statuses_min_fields {
  base_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "statuses"
"""
input statuses_min_order_by {
  base_id: order_by
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "statuses"
"""
type statuses_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [statuses!]!
}

"""
input type for inserting object relation for remote table "statuses"
"""
input statuses_obj_rel_insert_input {
  data: statuses_insert_input!
  on_conflict: statuses_on_conflict
}

"""
on conflict condition type for table "statuses"
"""
input statuses_on_conflict {
  constraint: statuses_constraint!
  update_columns: [statuses_update_column!]!
  where: statuses_bool_exp
}

"""
ordering options when selecting data from "statuses"
"""
input statuses_order_by {
  base: bases_order_by
  base_id: order_by
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
  users_aggregate: users_statuses_aggregate_order_by
}

"""
primary key columns input for table: "statuses"
"""
input statuses_pk_columns_input {
  id: uuid!
}

"""
select columns of table "statuses"
"""
enum statuses_select_column {
  """column name"""
  base_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "statuses"
"""
input statuses_set_input {
  base_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
update columns of table "statuses"
"""
enum statuses_update_column {
  """column name"""
  base_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

type StatusOutput {
  data: jsonb
  status: Boolean!
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "access"
  """
  access(
    """distinct select on columns"""
    distinct_on: [access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [access_order_by!]

    """filter the rows returned"""
    where: access_bool_exp
  ): [access!]!

  """
  fetch aggregated fields from the table: "access"
  """
  access_aggregate(
    """distinct select on columns"""
    distinct_on: [access_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [access_order_by!]

    """filter the rows returned"""
    where: access_bool_exp
  ): access_aggregate!

  """fetch data from the table: "access" using primary key columns"""
  access_by_pk(id: String!): access

  """
  fetch data from the table: "article_type"
  """
  article_type(
    """distinct select on columns"""
    distinct_on: [article_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_type_order_by!]

    """filter the rows returned"""
    where: article_type_bool_exp
  ): [article_type!]!

  """
  fetch aggregated fields from the table: "article_type"
  """
  article_type_aggregate(
    """distinct select on columns"""
    distinct_on: [article_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_type_order_by!]

    """filter the rows returned"""
    where: article_type_bool_exp
  ): article_type_aggregate!

  """fetch data from the table: "article_type" using primary key columns"""
  article_type_by_pk(type: String!): article_type

  """
  fetch data from the table: "articles"
  """
  articles(
    """distinct select on columns"""
    distinct_on: [articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_order_by!]

    """filter the rows returned"""
    where: articles_bool_exp
  ): [articles!]!

  """
  fetch aggregated fields from the table: "articles"
  """
  articles_aggregate(
    """distinct select on columns"""
    distinct_on: [articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_order_by!]

    """filter the rows returned"""
    where: articles_bool_exp
  ): articles_aggregate!

  """fetch data from the table: "articles" using primary key columns"""
  articles_by_pk(id: uuid!): articles

  """
  fetch data from the table: "articles_tags"
  """
  articles_tags(
    """distinct select on columns"""
    distinct_on: [articles_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_tags_order_by!]

    """filter the rows returned"""
    where: articles_tags_bool_exp
  ): [articles_tags!]!

  """
  fetch aggregated fields from the table: "articles_tags"
  """
  articles_tags_aggregate(
    """distinct select on columns"""
    distinct_on: [articles_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_tags_order_by!]

    """filter the rows returned"""
    where: articles_tags_bool_exp
  ): articles_tags_aggregate!

  """fetch data from the table: "articles_tags" using primary key columns"""
  articles_tags_by_pk(article_id: uuid!, tag: String!): articles_tags

  """
  fetch data from the table: "auth.account_providers"
  """
  auth_account_providers(
    """distinct select on columns"""
    distinct_on: [auth_account_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_providers_order_by!]

    """filter the rows returned"""
    where: auth_account_providers_bool_exp
  ): [auth_account_providers!]!

  """
  fetch aggregated fields from the table: "auth.account_providers"
  """
  auth_account_providers_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_account_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_providers_order_by!]

    """filter the rows returned"""
    where: auth_account_providers_bool_exp
  ): auth_account_providers_aggregate!

  """
  fetch data from the table: "auth.account_providers" using primary key columns
  """
  auth_account_providers_by_pk(id: uuid!): auth_account_providers

  """
  fetch data from the table: "auth.account_roles"
  """
  auth_account_roles(
    """distinct select on columns"""
    distinct_on: [auth_account_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_roles_order_by!]

    """filter the rows returned"""
    where: auth_account_roles_bool_exp
  ): [auth_account_roles!]!

  """
  fetch aggregated fields from the table: "auth.account_roles"
  """
  auth_account_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_account_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_roles_order_by!]

    """filter the rows returned"""
    where: auth_account_roles_bool_exp
  ): auth_account_roles_aggregate!

  """
  fetch data from the table: "auth.account_roles" using primary key columns
  """
  auth_account_roles_by_pk(id: uuid!): auth_account_roles

  """
  fetch data from the table: "auth.accounts"
  """
  auth_accounts(
    """distinct select on columns"""
    distinct_on: [auth_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_accounts_order_by!]

    """filter the rows returned"""
    where: auth_accounts_bool_exp
  ): [auth_accounts!]!

  """
  fetch aggregated fields from the table: "auth.accounts"
  """
  auth_accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_accounts_order_by!]

    """filter the rows returned"""
    where: auth_accounts_bool_exp
  ): auth_accounts_aggregate!

  """fetch data from the table: "auth.accounts" using primary key columns"""
  auth_accounts_by_pk(id: uuid!): auth_accounts

  """
  fetch data from the table: "auth.providers"
  """
  auth_providers(
    """distinct select on columns"""
    distinct_on: [auth_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_providers_order_by!]

    """filter the rows returned"""
    where: auth_providers_bool_exp
  ): [auth_providers!]!

  """
  fetch aggregated fields from the table: "auth.providers"
  """
  auth_providers_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_providers_order_by!]

    """filter the rows returned"""
    where: auth_providers_bool_exp
  ): auth_providers_aggregate!

  """fetch data from the table: "auth.providers" using primary key columns"""
  auth_providers_by_pk(provider: String!): auth_providers

  """
  fetch data from the table: "auth.refresh_tokens"
  """
  auth_refresh_tokens(
    """distinct select on columns"""
    distinct_on: [auth_refresh_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_refresh_tokens_order_by!]

    """filter the rows returned"""
    where: auth_refresh_tokens_bool_exp
  ): [auth_refresh_tokens!]!

  """
  fetch aggregated fields from the table: "auth.refresh_tokens"
  """
  auth_refresh_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_refresh_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_refresh_tokens_order_by!]

    """filter the rows returned"""
    where: auth_refresh_tokens_bool_exp
  ): auth_refresh_tokens_aggregate!

  """
  fetch data from the table: "auth.refresh_tokens" using primary key columns
  """
  auth_refresh_tokens_by_pk(refresh_token: uuid!): auth_refresh_tokens

  """
  fetch data from the table: "auth.roles"
  """
  auth_roles(
    """distinct select on columns"""
    distinct_on: [auth_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_roles_order_by!]

    """filter the rows returned"""
    where: auth_roles_bool_exp
  ): [auth_roles!]!

  """
  fetch aggregated fields from the table: "auth.roles"
  """
  auth_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [auth_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_roles_order_by!]

    """filter the rows returned"""
    where: auth_roles_bool_exp
  ): auth_roles_aggregate!

  """fetch data from the table: "auth.roles" using primary key columns"""
  auth_roles_by_pk(role: String!): auth_roles

  """
  fetch data from the table: "bases"
  """
  bases(
    """distinct select on columns"""
    distinct_on: [bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bases_order_by!]

    """filter the rows returned"""
    where: bases_bool_exp
  ): [bases!]!

  """
  fetch aggregated fields from the table: "bases"
  """
  bases_aggregate(
    """distinct select on columns"""
    distinct_on: [bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bases_order_by!]

    """filter the rows returned"""
    where: bases_bool_exp
  ): bases_aggregate!

  """fetch data from the table: "bases" using primary key columns"""
  bases_by_pk(id: uuid!): bases

  """
  fetch data from the table: "categories_of_articles"
  """
  categories_of_articles(
    """distinct select on columns"""
    distinct_on: [categories_of_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_of_articles_order_by!]

    """filter the rows returned"""
    where: categories_of_articles_bool_exp
  ): [categories_of_articles!]!

  """
  fetch aggregated fields from the table: "categories_of_articles"
  """
  categories_of_articles_aggregate(
    """distinct select on columns"""
    distinct_on: [categories_of_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_of_articles_order_by!]

    """filter the rows returned"""
    where: categories_of_articles_bool_exp
  ): categories_of_articles_aggregate!

  """
  fetch data from the table: "categories_of_articles" using primary key columns
  """
  categories_of_articles_by_pk(id: uuid!): categories_of_articles

  """
  fetch data from the table: "comments"
  """
  comments(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): [comments!]!

  """
  fetch aggregated fields from the table: "comments"
  """
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): comments_aggregate!

  """fetch data from the table: "comments" using primary key columns"""
  comments_by_pk(id: uuid!): comments

  """
  fetch data from the table: "default_categories_of_articles"
  """
  default_categories_of_articles(
    """distinct select on columns"""
    distinct_on: [default_categories_of_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_categories_of_articles_order_by!]

    """filter the rows returned"""
    where: default_categories_of_articles_bool_exp
  ): [default_categories_of_articles!]!

  """
  fetch aggregated fields from the table: "default_categories_of_articles"
  """
  default_categories_of_articles_aggregate(
    """distinct select on columns"""
    distinct_on: [default_categories_of_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_categories_of_articles_order_by!]

    """filter the rows returned"""
    where: default_categories_of_articles_bool_exp
  ): default_categories_of_articles_aggregate!

  """
  fetch data from the table: "default_categories_of_articles" using primary key columns
  """
  default_categories_of_articles_by_pk(id: uuid!): default_categories_of_articles

  """
  fetch data from the table: "default_departments"
  """
  default_departments(
    """distinct select on columns"""
    distinct_on: [default_departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_departments_order_by!]

    """filter the rows returned"""
    where: default_departments_bool_exp
  ): [default_departments!]!

  """
  fetch aggregated fields from the table: "default_departments"
  """
  default_departments_aggregate(
    """distinct select on columns"""
    distinct_on: [default_departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_departments_order_by!]

    """filter the rows returned"""
    where: default_departments_bool_exp
  ): default_departments_aggregate!

  """
  fetch data from the table: "default_departments" using primary key columns
  """
  default_departments_by_pk(id: uuid!): default_departments

  """
  fetch data from the table: "default_positions"
  """
  default_positions(
    """distinct select on columns"""
    distinct_on: [default_positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_positions_order_by!]

    """filter the rows returned"""
    where: default_positions_bool_exp
  ): [default_positions!]!

  """
  fetch aggregated fields from the table: "default_positions"
  """
  default_positions_aggregate(
    """distinct select on columns"""
    distinct_on: [default_positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_positions_order_by!]

    """filter the rows returned"""
    where: default_positions_bool_exp
  ): default_positions_aggregate!

  """
  fetch data from the table: "default_positions" using primary key columns
  """
  default_positions_by_pk(id: uuid!): default_positions

  """
  fetch data from the table: "default_statuses"
  """
  default_statuses(
    """distinct select on columns"""
    distinct_on: [default_statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_statuses_order_by!]

    """filter the rows returned"""
    where: default_statuses_bool_exp
  ): [default_statuses!]!

  """
  fetch aggregated fields from the table: "default_statuses"
  """
  default_statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [default_statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [default_statuses_order_by!]

    """filter the rows returned"""
    where: default_statuses_bool_exp
  ): default_statuses_aggregate!

  """
  fetch data from the table: "default_statuses" using primary key columns
  """
  default_statuses_by_pk(id: uuid!): default_statuses

  """
  fetch data from the table: "departments"
  """
  departments(
    """distinct select on columns"""
    distinct_on: [departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [departments_order_by!]

    """filter the rows returned"""
    where: departments_bool_exp
  ): [departments!]!

  """
  fetch aggregated fields from the table: "departments"
  """
  departments_aggregate(
    """distinct select on columns"""
    distinct_on: [departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [departments_order_by!]

    """filter the rows returned"""
    where: departments_bool_exp
  ): departments_aggregate!

  """fetch data from the table: "departments" using primary key columns"""
  departments_by_pk(id: uuid!): departments

  """
  fetch data from the table: "favorites"
  """
  favorites(
    """distinct select on columns"""
    distinct_on: [favorites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [favorites_order_by!]

    """filter the rows returned"""
    where: favorites_bool_exp
  ): [favorites!]!

  """
  fetch aggregated fields from the table: "favorites"
  """
  favorites_aggregate(
    """distinct select on columns"""
    distinct_on: [favorites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [favorites_order_by!]

    """filter the rows returned"""
    where: favorites_bool_exp
  ): favorites_aggregate!

  """fetch data from the table: "favorites" using primary key columns"""
  favorites_by_pk(id: uuid!): favorites

  """
  fetch data from the table: "invites"
  """
  invites(
    """distinct select on columns"""
    distinct_on: [invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [invites_order_by!]

    """filter the rows returned"""
    where: invites_bool_exp
  ): [invites!]!

  """
  fetch aggregated fields from the table: "invites"
  """
  invites_aggregate(
    """distinct select on columns"""
    distinct_on: [invites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [invites_order_by!]

    """filter the rows returned"""
    where: invites_bool_exp
  ): invites_aggregate!

  """fetch data from the table: "invites" using primary key columns"""
  invites_by_pk(id: uuid!): invites

  """
  fetch data from the table: "permission"
  """
  permission(
    """distinct select on columns"""
    distinct_on: [permission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [permission_order_by!]

    """filter the rows returned"""
    where: permission_bool_exp
  ): [permission!]!

  """
  fetch aggregated fields from the table: "permission"
  """
  permission_aggregate(
    """distinct select on columns"""
    distinct_on: [permission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [permission_order_by!]

    """filter the rows returned"""
    where: permission_bool_exp
  ): permission_aggregate!

  """fetch data from the table: "permission" using primary key columns"""
  permission_by_pk(id: String!): permission

  """
  fetch data from the table: "positions"
  """
  positions(
    """distinct select on columns"""
    distinct_on: [positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [positions_order_by!]

    """filter the rows returned"""
    where: positions_bool_exp
  ): [positions!]!

  """
  fetch aggregated fields from the table: "positions"
  """
  positions_aggregate(
    """distinct select on columns"""
    distinct_on: [positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [positions_order_by!]

    """filter the rows returned"""
    where: positions_bool_exp
  ): positions_aggregate!

  """fetch data from the table: "positions" using primary key columns"""
  positions_by_pk(id: uuid!): positions

  """
  fetch data from the table: "statuses"
  """
  statuses(
    """distinct select on columns"""
    distinct_on: [statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [statuses_order_by!]

    """filter the rows returned"""
    where: statuses_bool_exp
  ): [statuses!]!

  """
  fetch aggregated fields from the table: "statuses"
  """
  statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [statuses_order_by!]

    """filter the rows returned"""
    where: statuses_bool_exp
  ): statuses_aggregate!

  """fetch data from the table: "statuses" using primary key columns"""
  statuses_by_pk(id: uuid!): statuses

  """
  fetch data from the table: "tags"
  """
  tags(
    """distinct select on columns"""
    distinct_on: [tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tags_order_by!]

    """filter the rows returned"""
    where: tags_bool_exp
  ): [tags!]!

  """
  fetch aggregated fields from the table: "tags"
  """
  tags_aggregate(
    """distinct select on columns"""
    distinct_on: [tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tags_order_by!]

    """filter the rows returned"""
    where: tags_bool_exp
  ): tags_aggregate!

  """fetch data from the table: "tags" using primary key columns"""
  tags_by_pk(tag: String!): tags

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: uuid!): users

  """
  fetch data from the table: "users_departments"
  """
  users_departments(
    """distinct select on columns"""
    distinct_on: [users_departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_departments_order_by!]

    """filter the rows returned"""
    where: users_departments_bool_exp
  ): [users_departments!]!

  """
  fetch aggregated fields from the table: "users_departments"
  """
  users_departments_aggregate(
    """distinct select on columns"""
    distinct_on: [users_departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_departments_order_by!]

    """filter the rows returned"""
    where: users_departments_bool_exp
  ): users_departments_aggregate!

  """
  fetch data from the table: "users_departments" using primary key columns
  """
  users_departments_by_pk(id: uuid!): users_departments

  """
  fetch data from the table: "users_in_bases"
  """
  users_in_bases(
    """distinct select on columns"""
    distinct_on: [users_in_bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_in_bases_order_by!]

    """filter the rows returned"""
    where: users_in_bases_bool_exp
  ): [users_in_bases!]!

  """
  fetch aggregated fields from the table: "users_in_bases"
  """
  users_in_bases_aggregate(
    """distinct select on columns"""
    distinct_on: [users_in_bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_in_bases_order_by!]

    """filter the rows returned"""
    where: users_in_bases_bool_exp
  ): users_in_bases_aggregate!

  """fetch data from the table: "users_in_bases" using primary key columns"""
  users_in_bases_by_pk(base_id: uuid!, user_id: uuid!): users_in_bases

  """
  fetch data from the table: "users_permissions"
  """
  users_permissions(
    """distinct select on columns"""
    distinct_on: [users_permissions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_permissions_order_by!]

    """filter the rows returned"""
    where: users_permissions_bool_exp
  ): [users_permissions!]!

  """
  fetch aggregated fields from the table: "users_permissions"
  """
  users_permissions_aggregate(
    """distinct select on columns"""
    distinct_on: [users_permissions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_permissions_order_by!]

    """filter the rows returned"""
    where: users_permissions_bool_exp
  ): users_permissions_aggregate!

  """
  fetch data from the table: "users_permissions" using primary key columns
  """
  users_permissions_by_pk(id: uuid!): users_permissions

  """
  fetch data from the table: "users_positions"
  """
  users_positions(
    """distinct select on columns"""
    distinct_on: [users_positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_positions_order_by!]

    """filter the rows returned"""
    where: users_positions_bool_exp
  ): [users_positions!]!

  """
  fetch aggregated fields from the table: "users_positions"
  """
  users_positions_aggregate(
    """distinct select on columns"""
    distinct_on: [users_positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_positions_order_by!]

    """filter the rows returned"""
    where: users_positions_bool_exp
  ): users_positions_aggregate!

  """fetch data from the table: "users_positions" using primary key columns"""
  users_positions_by_pk(id: uuid!): users_positions

  """
  fetch data from the table: "users_read_articles"
  """
  users_read_articles(
    """distinct select on columns"""
    distinct_on: [users_read_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_read_articles_order_by!]

    """filter the rows returned"""
    where: users_read_articles_bool_exp
  ): [users_read_articles!]!

  """
  fetch aggregated fields from the table: "users_read_articles"
  """
  users_read_articles_aggregate(
    """distinct select on columns"""
    distinct_on: [users_read_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_read_articles_order_by!]

    """filter the rows returned"""
    where: users_read_articles_bool_exp
  ): users_read_articles_aggregate!

  """
  fetch data from the table: "users_read_articles" using primary key columns
  """
  users_read_articles_by_pk(article_id: uuid!, user_id: uuid!): users_read_articles

  """
  fetch data from the table: "users_statuses"
  """
  users_statuses(
    """distinct select on columns"""
    distinct_on: [users_statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_statuses_order_by!]

    """filter the rows returned"""
    where: users_statuses_bool_exp
  ): [users_statuses!]!

  """
  fetch aggregated fields from the table: "users_statuses"
  """
  users_statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [users_statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_statuses_order_by!]

    """filter the rows returned"""
    where: users_statuses_bool_exp
  ): users_statuses_aggregate!

  """fetch data from the table: "users_statuses" using primary key columns"""
  users_statuses_by_pk(id: uuid!): users_statuses
}

"""
Теги


columns and relationships of "tags"

"""
type tags {
  """An array relationship"""
  articles(
    """distinct select on columns"""
    distinct_on: [articles_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_tags_order_by!]

    """filter the rows returned"""
    where: articles_tags_bool_exp
  ): [articles_tags!]!

  """An aggregated array relationship"""
  articles_aggregate(
    """distinct select on columns"""
    distinct_on: [articles_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_tags_order_by!]

    """filter the rows returned"""
    where: articles_tags_bool_exp
  ): articles_tags_aggregate!
  tag: String!
}

"""
aggregated selection of "tags"
"""
type tags_aggregate {
  aggregate: tags_aggregate_fields
  nodes: [tags!]!
}

"""
aggregate fields of "tags"
"""
type tags_aggregate_fields {
  count(columns: [tags_select_column!], distinct: Boolean): Int
  max: tags_max_fields
  min: tags_min_fields
}

"""
order by aggregate values of table "tags"
"""
input tags_aggregate_order_by {
  count: order_by
  max: tags_max_order_by
  min: tags_min_order_by
}

"""
input type for inserting array relation for remote table "tags"
"""
input tags_arr_rel_insert_input {
  data: [tags_insert_input!]!
  on_conflict: tags_on_conflict
}

"""
Boolean expression to filter rows from the table "tags". All fields are combined with a logical 'AND'.
"""
input tags_bool_exp {
  _and: [tags_bool_exp]
  _not: tags_bool_exp
  _or: [tags_bool_exp]
  articles: articles_tags_bool_exp
  tag: String_comparison_exp
}

"""
unique or primary key constraints on table "tags"
"""
enum tags_constraint {
  """unique or primary key constraint"""
  tags_pkey
}

"""
input type for inserting data into table "tags"
"""
input tags_insert_input {
  articles: articles_tags_arr_rel_insert_input
  tag: String
}

"""aggregate max on columns"""
type tags_max_fields {
  tag: String
}

"""
order by max() on columns of table "tags"
"""
input tags_max_order_by {
  tag: order_by
}

"""aggregate min on columns"""
type tags_min_fields {
  tag: String
}

"""
order by min() on columns of table "tags"
"""
input tags_min_order_by {
  tag: order_by
}

"""
response of any mutation on the table "tags"
"""
type tags_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [tags!]!
}

"""
input type for inserting object relation for remote table "tags"
"""
input tags_obj_rel_insert_input {
  data: tags_insert_input!
  on_conflict: tags_on_conflict
}

"""
on conflict condition type for table "tags"
"""
input tags_on_conflict {
  constraint: tags_constraint!
  update_columns: [tags_update_column!]!
  where: tags_bool_exp
}

"""
ordering options when selecting data from "tags"
"""
input tags_order_by {
  articles_aggregate: articles_tags_aggregate_order_by
  tag: order_by
}

"""
primary key columns input for table: "tags"
"""
input tags_pk_columns_input {
  tag: String!
}

"""
select columns of table "tags"
"""
enum tags_select_column {
  """column name"""
  tag
}

"""
input type for updating data in table "tags"
"""
input tags_set_input {
  tag: String
}

"""
update columns of table "tags"
"""
enum tags_update_column {
  """column name"""
  tag
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""
Пользователи


columns and relationships of "users"

"""
type users {
  """An object relationship"""
  account: auth_accounts

  """An array relationship"""
  articles(
    """distinct select on columns"""
    distinct_on: [articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_order_by!]

    """filter the rows returned"""
    where: articles_bool_exp
  ): [articles!]!

  """An aggregated array relationship"""
  articles_aggregate(
    """distinct select on columns"""
    distinct_on: [articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [articles_order_by!]

    """filter the rows returned"""
    where: articles_bool_exp
  ): articles_aggregate!
  avatar_url: String

  """An array relationship"""
  bases(
    """distinct select on columns"""
    distinct_on: [users_in_bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_in_bases_order_by!]

    """filter the rows returned"""
    where: users_in_bases_bool_exp
  ): [users_in_bases!]!

  """An aggregated array relationship"""
  bases_aggregate(
    """distinct select on columns"""
    distinct_on: [users_in_bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_in_bases_order_by!]

    """filter the rows returned"""
    where: users_in_bases_bool_exp
  ): users_in_bases_aggregate!

  """An array relationship"""
  comments(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): [comments!]!

  """An aggregated array relationship"""
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): comments_aggregate!
  created_at: timestamptz!

  """An array relationship"""
  departments(
    """distinct select on columns"""
    distinct_on: [users_departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_departments_order_by!]

    """filter the rows returned"""
    where: users_departments_bool_exp
  ): [users_departments!]!

  """An aggregated array relationship"""
  departments_aggregate(
    """distinct select on columns"""
    distinct_on: [users_departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_departments_order_by!]

    """filter the rows returned"""
    where: users_departments_bool_exp
  ): users_departments_aggregate!
  display_name: String

  """An array relationship"""
  favorites(
    """distinct select on columns"""
    distinct_on: [favorites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [favorites_order_by!]

    """filter the rows returned"""
    where: favorites_bool_exp
  ): [favorites!]!

  """An aggregated array relationship"""
  favorites_aggregate(
    """distinct select on columns"""
    distinct_on: [favorites_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [favorites_order_by!]

    """filter the rows returned"""
    where: favorites_bool_exp
  ): favorites_aggregate!
  first_name: String
  id: uuid!
  last_name: String
  middle_name: String

  """An array relationship"""
  my_bases(
    """distinct select on columns"""
    distinct_on: [bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bases_order_by!]

    """filter the rows returned"""
    where: bases_bool_exp
  ): [bases!]!

  """An aggregated array relationship"""
  my_bases_aggregate(
    """distinct select on columns"""
    distinct_on: [bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bases_order_by!]

    """filter the rows returned"""
    where: bases_bool_exp
  ): bases_aggregate!

  """An array relationship"""
  permissions(
    """distinct select on columns"""
    distinct_on: [users_permissions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_permissions_order_by!]

    """filter the rows returned"""
    where: users_permissions_bool_exp
  ): [users_permissions!]!

  """An aggregated array relationship"""
  permissions_aggregate(
    """distinct select on columns"""
    distinct_on: [users_permissions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_permissions_order_by!]

    """filter the rows returned"""
    where: users_permissions_bool_exp
  ): users_permissions_aggregate!
  phone_number: String

  """An array relationship"""
  positions(
    """distinct select on columns"""
    distinct_on: [users_positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_positions_order_by!]

    """filter the rows returned"""
    where: users_positions_bool_exp
  ): [users_positions!]!

  """An aggregated array relationship"""
  positions_aggregate(
    """distinct select on columns"""
    distinct_on: [users_positions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_positions_order_by!]

    """filter the rows returned"""
    where: users_positions_bool_exp
  ): users_positions_aggregate!

  """An array relationship"""
  read_articles(
    """distinct select on columns"""
    distinct_on: [users_read_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_read_articles_order_by!]

    """filter the rows returned"""
    where: users_read_articles_bool_exp
  ): [users_read_articles!]!

  """An aggregated array relationship"""
  read_articles_aggregate(
    """distinct select on columns"""
    distinct_on: [users_read_articles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_read_articles_order_by!]

    """filter the rows returned"""
    where: users_read_articles_bool_exp
  ): users_read_articles_aggregate!

  """An array relationship"""
  statuses(
    """distinct select on columns"""
    distinct_on: [users_statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_statuses_order_by!]

    """filter the rows returned"""
    where: users_statuses_bool_exp
  ): [users_statuses!]!

  """An aggregated array relationship"""
  statuses_aggregate(
    """distinct select on columns"""
    distinct_on: [users_statuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_statuses_order_by!]

    """filter the rows returned"""
    where: users_statuses_bool_exp
  ): users_statuses_aggregate!
  updated_at: timestamptz!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int
  max: users_max_fields
  min: users_min_fields
}

"""
order by aggregate values of table "users"
"""
input users_aggregate_order_by {
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
}

"""
input type for inserting array relation for remote table "users"
"""
input users_arr_rel_insert_input {
  data: [users_insert_input!]!
  on_conflict: users_on_conflict
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp]
  _not: users_bool_exp
  _or: [users_bool_exp]
  account: auth_accounts_bool_exp
  articles: articles_bool_exp
  avatar_url: String_comparison_exp
  bases: users_in_bases_bool_exp
  comments: comments_bool_exp
  created_at: timestamptz_comparison_exp
  departments: users_departments_bool_exp
  display_name: String_comparison_exp
  favorites: favorites_bool_exp
  first_name: String_comparison_exp
  id: uuid_comparison_exp
  last_name: String_comparison_exp
  middle_name: String_comparison_exp
  my_bases: bases_bool_exp
  permissions: users_permissions_bool_exp
  phone_number: String_comparison_exp
  positions: users_positions_bool_exp
  read_articles: users_read_articles_bool_exp
  statuses: users_statuses_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  users_pkey
}

"""
Пользователи в отделах


columns and relationships of "users_departments"

"""
type users_departments {
  created_at: timestamptz!

  """An object relationship"""
  department: departments!
  department_id: uuid!
  id: uuid!
  updated_at: timestamptz!

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "users_departments"
"""
type users_departments_aggregate {
  aggregate: users_departments_aggregate_fields
  nodes: [users_departments!]!
}

"""
aggregate fields of "users_departments"
"""
type users_departments_aggregate_fields {
  count(columns: [users_departments_select_column!], distinct: Boolean): Int
  max: users_departments_max_fields
  min: users_departments_min_fields
}

"""
order by aggregate values of table "users_departments"
"""
input users_departments_aggregate_order_by {
  count: order_by
  max: users_departments_max_order_by
  min: users_departments_min_order_by
}

"""
input type for inserting array relation for remote table "users_departments"
"""
input users_departments_arr_rel_insert_input {
  data: [users_departments_insert_input!]!
  on_conflict: users_departments_on_conflict
}

"""
Boolean expression to filter rows from the table "users_departments". All fields are combined with a logical 'AND'.
"""
input users_departments_bool_exp {
  _and: [users_departments_bool_exp]
  _not: users_departments_bool_exp
  _or: [users_departments_bool_exp]
  created_at: timestamptz_comparison_exp
  department: departments_bool_exp
  department_id: uuid_comparison_exp
  id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "users_departments"
"""
enum users_departments_constraint {
  """unique or primary key constraint"""
  users_departments_pkey

  """unique or primary key constraint"""
  users_departments_user_id_department_id_key
}

"""
input type for inserting data into table "users_departments"
"""
input users_departments_insert_input {
  created_at: timestamptz
  department: departments_obj_rel_insert_input
  department_id: uuid
  id: uuid
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type users_departments_max_fields {
  created_at: timestamptz
  department_id: uuid
  id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "users_departments"
"""
input users_departments_max_order_by {
  created_at: order_by
  department_id: order_by
  id: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type users_departments_min_fields {
  created_at: timestamptz
  department_id: uuid
  id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "users_departments"
"""
input users_departments_min_order_by {
  created_at: order_by
  department_id: order_by
  id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "users_departments"
"""
type users_departments_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [users_departments!]!
}

"""
input type for inserting object relation for remote table "users_departments"
"""
input users_departments_obj_rel_insert_input {
  data: users_departments_insert_input!
  on_conflict: users_departments_on_conflict
}

"""
on conflict condition type for table "users_departments"
"""
input users_departments_on_conflict {
  constraint: users_departments_constraint!
  update_columns: [users_departments_update_column!]!
  where: users_departments_bool_exp
}

"""
ordering options when selecting data from "users_departments"
"""
input users_departments_order_by {
  created_at: order_by
  department: departments_order_by
  department_id: order_by
  id: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: "users_departments"
"""
input users_departments_pk_columns_input {
  id: uuid!
}

"""
select columns of table "users_departments"
"""
enum users_departments_select_column {
  """column name"""
  created_at

  """column name"""
  department_id

  """column name"""
  id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "users_departments"
"""
input users_departments_set_input {
  created_at: timestamptz
  department_id: uuid
  id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
update columns of table "users_departments"
"""
enum users_departments_update_column {
  """column name"""
  created_at

  """column name"""
  department_id

  """column name"""
  id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
columns and relationships of "users_in_bases"
"""
type users_in_bases {
  """An object relationship"""
  base: bases!
  base_id: uuid!

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "users_in_bases"
"""
type users_in_bases_aggregate {
  aggregate: users_in_bases_aggregate_fields
  nodes: [users_in_bases!]!
}

"""
aggregate fields of "users_in_bases"
"""
type users_in_bases_aggregate_fields {
  count(columns: [users_in_bases_select_column!], distinct: Boolean): Int
  max: users_in_bases_max_fields
  min: users_in_bases_min_fields
}

"""
order by aggregate values of table "users_in_bases"
"""
input users_in_bases_aggregate_order_by {
  count: order_by
  max: users_in_bases_max_order_by
  min: users_in_bases_min_order_by
}

"""
input type for inserting array relation for remote table "users_in_bases"
"""
input users_in_bases_arr_rel_insert_input {
  data: [users_in_bases_insert_input!]!
  on_conflict: users_in_bases_on_conflict
}

"""
Boolean expression to filter rows from the table "users_in_bases". All fields are combined with a logical 'AND'.
"""
input users_in_bases_bool_exp {
  _and: [users_in_bases_bool_exp]
  _not: users_in_bases_bool_exp
  _or: [users_in_bases_bool_exp]
  base: bases_bool_exp
  base_id: uuid_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "users_in_bases"
"""
enum users_in_bases_constraint {
  """unique or primary key constraint"""
  users_in_bases_pkey
}

"""
input type for inserting data into table "users_in_bases"
"""
input users_in_bases_insert_input {
  base: bases_obj_rel_insert_input
  base_id: uuid
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type users_in_bases_max_fields {
  base_id: uuid
  user_id: uuid
}

"""
order by max() on columns of table "users_in_bases"
"""
input users_in_bases_max_order_by {
  base_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type users_in_bases_min_fields {
  base_id: uuid
  user_id: uuid
}

"""
order by min() on columns of table "users_in_bases"
"""
input users_in_bases_min_order_by {
  base_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "users_in_bases"
"""
type users_in_bases_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [users_in_bases!]!
}

"""
input type for inserting object relation for remote table "users_in_bases"
"""
input users_in_bases_obj_rel_insert_input {
  data: users_in_bases_insert_input!
  on_conflict: users_in_bases_on_conflict
}

"""
on conflict condition type for table "users_in_bases"
"""
input users_in_bases_on_conflict {
  constraint: users_in_bases_constraint!
  update_columns: [users_in_bases_update_column!]!
  where: users_in_bases_bool_exp
}

"""
ordering options when selecting data from "users_in_bases"
"""
input users_in_bases_order_by {
  base: bases_order_by
  base_id: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: "users_in_bases"
"""
input users_in_bases_pk_columns_input {
  base_id: uuid!
  user_id: uuid!
}

"""
select columns of table "users_in_bases"
"""
enum users_in_bases_select_column {
  """column name"""
  base_id

  """column name"""
  user_id
}

"""
input type for updating data in table "users_in_bases"
"""
input users_in_bases_set_input {
  base_id: uuid
  user_id: uuid
}

"""
update columns of table "users_in_bases"
"""
enum users_in_bases_update_column {
  """column name"""
  base_id

  """column name"""
  user_id
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  account: auth_accounts_obj_rel_insert_input
  articles: articles_arr_rel_insert_input
  avatar_url: String
  bases: users_in_bases_arr_rel_insert_input
  comments: comments_arr_rel_insert_input
  created_at: timestamptz
  departments: users_departments_arr_rel_insert_input
  display_name: String
  favorites: favorites_arr_rel_insert_input
  first_name: String
  id: uuid
  last_name: String
  middle_name: String
  my_bases: bases_arr_rel_insert_input
  permissions: users_permissions_arr_rel_insert_input
  phone_number: String
  positions: users_positions_arr_rel_insert_input
  read_articles: users_read_articles_arr_rel_insert_input
  statuses: users_statuses_arr_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type users_max_fields {
  avatar_url: String
  created_at: timestamptz
  display_name: String
  first_name: String
  id: uuid
  last_name: String
  middle_name: String
  phone_number: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "users"
"""
input users_max_order_by {
  avatar_url: order_by
  created_at: order_by
  display_name: order_by
  first_name: order_by
  id: order_by
  last_name: order_by
  middle_name: order_by
  phone_number: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type users_min_fields {
  avatar_url: String
  created_at: timestamptz
  display_name: String
  first_name: String
  id: uuid
  last_name: String
  middle_name: String
  phone_number: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "users"
"""
input users_min_order_by {
  avatar_url: order_by
  created_at: order_by
  display_name: order_by
  first_name: order_by
  id: order_by
  last_name: order_by
  middle_name: order_by
  phone_number: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!
  on_conflict: users_on_conflict
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]!
  where: users_bool_exp
}

"""
ordering options when selecting data from "users"
"""
input users_order_by {
  account: auth_accounts_order_by
  articles_aggregate: articles_aggregate_order_by
  avatar_url: order_by
  bases_aggregate: users_in_bases_aggregate_order_by
  comments_aggregate: comments_aggregate_order_by
  created_at: order_by
  departments_aggregate: users_departments_aggregate_order_by
  display_name: order_by
  favorites_aggregate: favorites_aggregate_order_by
  first_name: order_by
  id: order_by
  last_name: order_by
  middle_name: order_by
  my_bases_aggregate: bases_aggregate_order_by
  permissions_aggregate: users_permissions_aggregate_order_by
  phone_number: order_by
  positions_aggregate: users_positions_aggregate_order_by
  read_articles_aggregate: users_read_articles_aggregate_order_by
  statuses_aggregate: users_statuses_aggregate_order_by
  updated_at: order_by
}

"""
Права доступа пользователей


columns and relationships of "users_permissions"

"""
type users_permissions {
  """An object relationship"""
  base: bases!
  base_id: uuid!
  created_at: timestamptz!
  id: uuid!
  permission: String!
  updated_at: timestamptz!

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "users_permissions"
"""
type users_permissions_aggregate {
  aggregate: users_permissions_aggregate_fields
  nodes: [users_permissions!]!
}

"""
aggregate fields of "users_permissions"
"""
type users_permissions_aggregate_fields {
  count(columns: [users_permissions_select_column!], distinct: Boolean): Int
  max: users_permissions_max_fields
  min: users_permissions_min_fields
}

"""
order by aggregate values of table "users_permissions"
"""
input users_permissions_aggregate_order_by {
  count: order_by
  max: users_permissions_max_order_by
  min: users_permissions_min_order_by
}

"""
input type for inserting array relation for remote table "users_permissions"
"""
input users_permissions_arr_rel_insert_input {
  data: [users_permissions_insert_input!]!
  on_conflict: users_permissions_on_conflict
}

"""
Boolean expression to filter rows from the table "users_permissions". All fields are combined with a logical 'AND'.
"""
input users_permissions_bool_exp {
  _and: [users_permissions_bool_exp]
  _not: users_permissions_bool_exp
  _or: [users_permissions_bool_exp]
  base: bases_bool_exp
  base_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  permission: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "users_permissions"
"""
enum users_permissions_constraint {
  """unique or primary key constraint"""
  users_permissions_pkey

  """unique or primary key constraint"""
  users_permissions_user_id_base_id_permission_key
}

"""
input type for inserting data into table "users_permissions"
"""
input users_permissions_insert_input {
  base: bases_obj_rel_insert_input
  base_id: uuid
  created_at: timestamptz
  id: uuid
  permission: String
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type users_permissions_max_fields {
  base_id: uuid
  created_at: timestamptz
  id: uuid
  permission: String
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "users_permissions"
"""
input users_permissions_max_order_by {
  base_id: order_by
  created_at: order_by
  id: order_by
  permission: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type users_permissions_min_fields {
  base_id: uuid
  created_at: timestamptz
  id: uuid
  permission: String
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "users_permissions"
"""
input users_permissions_min_order_by {
  base_id: order_by
  created_at: order_by
  id: order_by
  permission: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "users_permissions"
"""
type users_permissions_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [users_permissions!]!
}

"""
input type for inserting object relation for remote table "users_permissions"
"""
input users_permissions_obj_rel_insert_input {
  data: users_permissions_insert_input!
  on_conflict: users_permissions_on_conflict
}

"""
on conflict condition type for table "users_permissions"
"""
input users_permissions_on_conflict {
  constraint: users_permissions_constraint!
  update_columns: [users_permissions_update_column!]!
  where: users_permissions_bool_exp
}

"""
ordering options when selecting data from "users_permissions"
"""
input users_permissions_order_by {
  base: bases_order_by
  base_id: order_by
  created_at: order_by
  id: order_by
  permission: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: "users_permissions"
"""
input users_permissions_pk_columns_input {
  id: uuid!
}

"""
select columns of table "users_permissions"
"""
enum users_permissions_select_column {
  """column name"""
  base_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  permission

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "users_permissions"
"""
input users_permissions_set_input {
  base_id: uuid
  created_at: timestamptz
  id: uuid
  permission: String
  updated_at: timestamptz
  user_id: uuid
}

"""
update columns of table "users_permissions"
"""
enum users_permissions_update_column {
  """column name"""
  base_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  permission

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
primary key columns input for table: "users"
"""
input users_pk_columns_input {
  id: uuid!
}

"""
Должности пользователей


columns and relationships of "users_positions"

"""
type users_positions {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  position: positions!
  position_id: uuid!
  updated_at: timestamptz!

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "users_positions"
"""
type users_positions_aggregate {
  aggregate: users_positions_aggregate_fields
  nodes: [users_positions!]!
}

"""
aggregate fields of "users_positions"
"""
type users_positions_aggregate_fields {
  count(columns: [users_positions_select_column!], distinct: Boolean): Int
  max: users_positions_max_fields
  min: users_positions_min_fields
}

"""
order by aggregate values of table "users_positions"
"""
input users_positions_aggregate_order_by {
  count: order_by
  max: users_positions_max_order_by
  min: users_positions_min_order_by
}

"""
input type for inserting array relation for remote table "users_positions"
"""
input users_positions_arr_rel_insert_input {
  data: [users_positions_insert_input!]!
  on_conflict: users_positions_on_conflict
}

"""
Boolean expression to filter rows from the table "users_positions". All fields are combined with a logical 'AND'.
"""
input users_positions_bool_exp {
  _and: [users_positions_bool_exp]
  _not: users_positions_bool_exp
  _or: [users_positions_bool_exp]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  position: positions_bool_exp
  position_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "users_positions"
"""
enum users_positions_constraint {
  """unique or primary key constraint"""
  users_positions_pkey

  """unique or primary key constraint"""
  users_positions_user_id_position_id_key
}

"""
input type for inserting data into table "users_positions"
"""
input users_positions_insert_input {
  created_at: timestamptz
  id: uuid
  position: positions_obj_rel_insert_input
  position_id: uuid
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type users_positions_max_fields {
  created_at: timestamptz
  id: uuid
  position_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "users_positions"
"""
input users_positions_max_order_by {
  created_at: order_by
  id: order_by
  position_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type users_positions_min_fields {
  created_at: timestamptz
  id: uuid
  position_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "users_positions"
"""
input users_positions_min_order_by {
  created_at: order_by
  id: order_by
  position_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "users_positions"
"""
type users_positions_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [users_positions!]!
}

"""
input type for inserting object relation for remote table "users_positions"
"""
input users_positions_obj_rel_insert_input {
  data: users_positions_insert_input!
  on_conflict: users_positions_on_conflict
}

"""
on conflict condition type for table "users_positions"
"""
input users_positions_on_conflict {
  constraint: users_positions_constraint!
  update_columns: [users_positions_update_column!]!
  where: users_positions_bool_exp
}

"""
ordering options when selecting data from "users_positions"
"""
input users_positions_order_by {
  created_at: order_by
  id: order_by
  position: positions_order_by
  position_id: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: "users_positions"
"""
input users_positions_pk_columns_input {
  id: uuid!
}

"""
select columns of table "users_positions"
"""
enum users_positions_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  position_id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "users_positions"
"""
input users_positions_set_input {
  created_at: timestamptz
  id: uuid
  position_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
update columns of table "users_positions"
"""
enum users_positions_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  position_id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
Прочитанные статьи


columns and relationships of "users_read_articles"

"""
type users_read_articles {
  """An object relationship"""
  article: articles!
  article_id: uuid!

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "users_read_articles"
"""
type users_read_articles_aggregate {
  aggregate: users_read_articles_aggregate_fields
  nodes: [users_read_articles!]!
}

"""
aggregate fields of "users_read_articles"
"""
type users_read_articles_aggregate_fields {
  count(columns: [users_read_articles_select_column!], distinct: Boolean): Int
  max: users_read_articles_max_fields
  min: users_read_articles_min_fields
}

"""
order by aggregate values of table "users_read_articles"
"""
input users_read_articles_aggregate_order_by {
  count: order_by
  max: users_read_articles_max_order_by
  min: users_read_articles_min_order_by
}

"""
input type for inserting array relation for remote table "users_read_articles"
"""
input users_read_articles_arr_rel_insert_input {
  data: [users_read_articles_insert_input!]!
  on_conflict: users_read_articles_on_conflict
}

"""
Boolean expression to filter rows from the table "users_read_articles". All fields are combined with a logical 'AND'.
"""
input users_read_articles_bool_exp {
  _and: [users_read_articles_bool_exp]
  _not: users_read_articles_bool_exp
  _or: [users_read_articles_bool_exp]
  article: articles_bool_exp
  article_id: uuid_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "users_read_articles"
"""
enum users_read_articles_constraint {
  """unique or primary key constraint"""
  read_articles_pkey
}

"""
input type for inserting data into table "users_read_articles"
"""
input users_read_articles_insert_input {
  article: articles_obj_rel_insert_input
  article_id: uuid
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type users_read_articles_max_fields {
  article_id: uuid
  user_id: uuid
}

"""
order by max() on columns of table "users_read_articles"
"""
input users_read_articles_max_order_by {
  article_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type users_read_articles_min_fields {
  article_id: uuid
  user_id: uuid
}

"""
order by min() on columns of table "users_read_articles"
"""
input users_read_articles_min_order_by {
  article_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "users_read_articles"
"""
type users_read_articles_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [users_read_articles!]!
}

"""
input type for inserting object relation for remote table "users_read_articles"
"""
input users_read_articles_obj_rel_insert_input {
  data: users_read_articles_insert_input!
  on_conflict: users_read_articles_on_conflict
}

"""
on conflict condition type for table "users_read_articles"
"""
input users_read_articles_on_conflict {
  constraint: users_read_articles_constraint!
  update_columns: [users_read_articles_update_column!]!
  where: users_read_articles_bool_exp
}

"""
ordering options when selecting data from "users_read_articles"
"""
input users_read_articles_order_by {
  article: articles_order_by
  article_id: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: "users_read_articles"
"""
input users_read_articles_pk_columns_input {
  article_id: uuid!
  user_id: uuid!
}

"""
select columns of table "users_read_articles"
"""
enum users_read_articles_select_column {
  """column name"""
  article_id

  """column name"""
  user_id
}

"""
input type for updating data in table "users_read_articles"
"""
input users_read_articles_set_input {
  article_id: uuid
  user_id: uuid
}

"""
update columns of table "users_read_articles"
"""
enum users_read_articles_update_column {
  """column name"""
  article_id

  """column name"""
  user_id
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  avatar_url

  """column name"""
  created_at

  """column name"""
  display_name

  """column name"""
  first_name

  """column name"""
  id

  """column name"""
  last_name

  """column name"""
  middle_name

  """column name"""
  phone_number

  """column name"""
  updated_at
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  avatar_url: String
  created_at: timestamptz
  display_name: String
  first_name: String
  id: uuid
  last_name: String
  middle_name: String
  phone_number: String
  updated_at: timestamptz
}

"""
Статусы пользователей


columns and relationships of "users_statuses"

"""
type users_statuses {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  status: statuses!
  status_id: uuid!
  updated_at: timestamptz!

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "users_statuses"
"""
type users_statuses_aggregate {
  aggregate: users_statuses_aggregate_fields
  nodes: [users_statuses!]!
}

"""
aggregate fields of "users_statuses"
"""
type users_statuses_aggregate_fields {
  count(columns: [users_statuses_select_column!], distinct: Boolean): Int
  max: users_statuses_max_fields
  min: users_statuses_min_fields
}

"""
order by aggregate values of table "users_statuses"
"""
input users_statuses_aggregate_order_by {
  count: order_by
  max: users_statuses_max_order_by
  min: users_statuses_min_order_by
}

"""
input type for inserting array relation for remote table "users_statuses"
"""
input users_statuses_arr_rel_insert_input {
  data: [users_statuses_insert_input!]!
  on_conflict: users_statuses_on_conflict
}

"""
Boolean expression to filter rows from the table "users_statuses". All fields are combined with a logical 'AND'.
"""
input users_statuses_bool_exp {
  _and: [users_statuses_bool_exp]
  _not: users_statuses_bool_exp
  _or: [users_statuses_bool_exp]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  status: statuses_bool_exp
  status_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "users_statuses"
"""
enum users_statuses_constraint {
  """unique or primary key constraint"""
  users_statuses_pkey
}

"""
input type for inserting data into table "users_statuses"
"""
input users_statuses_insert_input {
  created_at: timestamptz
  id: uuid
  status: statuses_obj_rel_insert_input
  status_id: uuid
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type users_statuses_max_fields {
  created_at: timestamptz
  id: uuid
  status_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "users_statuses"
"""
input users_statuses_max_order_by {
  created_at: order_by
  id: order_by
  status_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type users_statuses_min_fields {
  created_at: timestamptz
  id: uuid
  status_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "users_statuses"
"""
input users_statuses_min_order_by {
  created_at: order_by
  id: order_by
  status_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "users_statuses"
"""
type users_statuses_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [users_statuses!]!
}

"""
input type for inserting object relation for remote table "users_statuses"
"""
input users_statuses_obj_rel_insert_input {
  data: users_statuses_insert_input!
  on_conflict: users_statuses_on_conflict
}

"""
on conflict condition type for table "users_statuses"
"""
input users_statuses_on_conflict {
  constraint: users_statuses_constraint!
  update_columns: [users_statuses_update_column!]!
  where: users_statuses_bool_exp
}

"""
ordering options when selecting data from "users_statuses"
"""
input users_statuses_order_by {
  created_at: order_by
  id: order_by
  status: statuses_order_by
  status_id: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: "users_statuses"
"""
input users_statuses_pk_columns_input {
  id: uuid!
}

"""
select columns of table "users_statuses"
"""
enum users_statuses_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  status_id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "users_statuses"
"""
input users_statuses_set_input {
  created_at: timestamptz
  id: uuid
  status_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
update columns of table "users_statuses"
"""
enum users_statuses_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  status_id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  avatar_url

  """column name"""
  created_at

  """column name"""
  display_name

  """column name"""
  first_name

  """column name"""
  id

  """column name"""
  last_name

  """column name"""
  middle_name

  """column name"""
  phone_number

  """column name"""
  updated_at
}

scalar uuid

"""
expression to compare columns of type uuid. All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

